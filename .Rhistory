"MEB", "Minimum Expenditure Basket",
"NFI", "Non-food Items",
"NNGO", "National Non-governmental Organisation",
"OCHA", "UN Office for the Coordination of Humanitarian Affairs",
"PIN", "People in Need",
"WFP", "World Food Programme"
) %>%
kable(caption = "**Acronyms**", col.names = NULL, booktabs = TRUE) %>%
kable_styling(latex_options = c("hold_position"), position = "left", full_width = FALSE)
tribble(
~acronym, ~name,
"CBT", "Cash-based Transfers",
"CCCM", "Camp Management and Camp Coordination",
"CSO", "Civil Society Organisation",
"CWG", "Cash Working Group",
"FAO", "Food and Agriculture Organisation",
"FSC", "Food Security Cluster",
"HNO", "Humanitarian Needs Overview",
"HRP", "Humanitarian Response Plan",
"IDP", "Internally Displaced Person",
"IERP", "Interim Emergency Response Plan",
"MEB", "Minimum Expenditure Basket",
"NFI", "Non-food Items",
"NNGO", "National Non-governmental Organisation",
"OCHA", "UN Office for the Coordination of Humanitarian Affairs",
"PIN", "People in Need",
"WFP", "World Food Programme"
) %>%
kable(caption = "**Acronyms**", col.names = NULL, booktabs = TRUE) %>%
kable_styling(latex_options = c("hold_position"), position = "left", full_width = FALSE)
tribble(
~acronym, ~name,
"CBT", "Cash-based Transfers",
"CCCM", "Camp Management and Camp Coordination",
"CSO", "Civil Society Organisation",
"CWG", "Cash Working Group",
"FAO", "Food and Agriculture Organisation",
"FSC", "Food Security Cluster",
"HNO", "Humanitarian Needs Overview",
"HRP", "Humanitarian Response Plan",
"IDP", "Internally Displaced Person",
"IERP", "Interim Emergency Response Plan",
"MEB", "Minimum Expenditure Basket",
"NFI", "Non-food Items",
"NNGO", "National Non-governmental Organisation",
"OCHA", "UN Office for the Coordination of Humanitarian Affairs",
"PIN", "People in Need",
"WFP", "World Food Programme"
) %>%
kbl(caption = "**Acronyms**", col.names = NULL, booktabs = TRUE) %>%
kable_styling(latex_options = c("hold_position"), position = "left", full_width = FALSE)
# reminder to recalculate the 78% above if you rerun the data
ben %>%
group_by(implementing_partners) %>%
summarise(states = n_distinct(admin1_pcode),
townships = n_distinct(admin3_pcode),
beneficiaries = sum(beneficiaries)) %>%
arrange(desc(states)) %>%
ggplot(aes(x = beneficiaries, y = townships, text = implementing_partners)) +
geom_point(aes(size = beneficiaries)) +
scale_x_continuous(trans = "log", labels = comma, breaks = c(0, 100, 1000, 10000, 100000, 300000)) +
scale_y_continuous(breaks = seq(0, 30, 5)) +
labs(x = "Number of beneficiaries",
y = "Number of townships",
title = "Plot of beneficiaries and townships reached, by implementing partner")
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township) %>%
summarise(beneficiaries = sum(beneficiaries),
partners = n_distinct(implementing_partners), .groups = "drop") %>%
arrange(desc(partners)) %>%
ggplot(aes(x = beneficiaries)) +
geom_histogram(binwidth = 0.1) +
scale_x_log10() +
scale_x_continuous(labels = comma) +
facet_wrap(~ partners) +
labs(y = "number of locations",
x = "beneficiaries per location",
title = "Histograms of beneficiaries by location",
subtitle = "Faceted by number of partners per location")
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township) %>%
summarise(beneficiaries = sum(beneficiaries),
partners = n_distinct(implementing_partners), .groups = "drop") %>%
arrange(desc(partners)) %>%
ggplot(aes(x = beneficiaries)) +
geom_histogram(binwidth = 0.1) +
scale_x_continuous(labels = comma, trans = "log10") +
facet_wrap(~ partners) +
labs(y = "number of locations",
x = "beneficiaries per location",
title = "Histograms of beneficiaries by location",
subtitle = "Faceted by number of partners per location")
fsc %>%
filter(!is.na(delivery_modality)) %>%
group_by(hrp_ierp, delivery_modality) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
ggplot(aes(x = delivery_modality, y = beneficiaries, fill = hrp_ierp)) +
geom_col(position = "dodge") +
scale_fill_viridis_d() +
scale_y_continuous(labels = comma, breaks = seq(0, 3000000, by = 500000)) +
labs(x = "Delivery modality",
y = "Number of beneficiaries",
title = "Beneficiary frequencies by delivery modalities and response plan",
subtitle = "Figures are in beneficiary frequencies",
fill = "")
# I feel like this is the most inefficient way to do this; still works, though
# you're going to need to rewrite this when you have Q4 data
gap_months <- fsc %>%
filter(frequency == "Monthly" & beneficiaries > 0) %>%
group_by(date, implementing_partners, activity, state, township, location) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
pivot_wider(names_from = date, values_from = beneficiaries) %>%
unnest() %>%
ungroup() %>%
mutate(recurrences = rowSums(!is.na(select(., -implementing_partners, -activity, -state, -township, -location))),
ben_max = pmax(`2021-01-01`, `2021-02-01`, `2021-03-01`, `2021-04-01`, `2021-05-01`, `2021-06-01`,
`2021-07-01`, `2021-08-01`, `2021-09-01`, `2021-10-01`, `2021-11-01`, `2021-12-01`, na.rm = TRUE)) %>%
pivot_longer(cols = c(`2021-01-01`, `2021-02-01`, `2021-03-01`, `2021-04-01`, `2021-05-01`, `2021-06-01`,
`2021-07-01`, `2021-08-01`, `2021-09-01`, `2021-10-01`, `2021-11-01`, `2021-12-01`),
names_to = "date", values_to = "beneficiaries") %>%
mutate(distribution = ifelse(is.na(beneficiaries), "n", "y")) %>%
select(-beneficiaries) %>%
pivot_wider(names_from = date, values_from = distribution) %>%
mutate(gaps = paste0(`2021-01-01`, `2021-02-01`, `2021-03-01`, `2021-04-01`, `2021-05-01`, `2021-06-01`,
`2021-07-01`, `2021-08-01`, `2021-09-01`, `2021-10-01`, `2021-11-01`, `2021-12-01`)) %>%
mutate(gap_months = case_when(str_detect(gaps, "ynnnnnnnnnnny") ~ 11,
str_detect(gaps, "ynnnnnnnnnny") ~ 10,
str_detect(gaps, "ynnnnnnnnny") ~ 9,
str_detect(gaps, "ynnnnnnnny") ~ 8,
str_detect(gaps, "ynnnnnnny") ~ 7,
str_detect(gaps, "ynnnnnny") ~ 6,
str_detect(gaps, "ynnnnny") ~ 5,
str_detect(gaps, "ynnnny") ~ 4,
str_detect(gaps, "ynnny") ~ 3,
str_detect(gaps, "ynny") ~ 2,
str_detect(gaps, "yny") ~ 1,
TRUE ~ 0))
gap_months %>%
filter(recurrences > 1) %>%
group_by(gap_months) %>%
summarise(locations = n_distinct(location),
townships = n_distinct(township),
beneficiaries = sum(ben_max)) %>%
mutate(pc_of_ben = round(beneficiaries / sum(beneficiaries) * 100, digits = 2)) %>%
kbl(caption = "Number of beneficiaries and locations by duration of gaps in implementation",
format.args = list(big.mark = ","),
booktabs = TRUE) %>%
kable_styling(latex_options = c("hold_position", "striped")) %>%
footnote("Only beneficiaries of monthly activities that recurred at least once are included",
general_title = "")
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE, fig.pos="H")
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(fuzzyjoin)
library(scales)
library(magrittr)
library(sf)
library(s2)
library(bookdown)
library(data.table)
library(ggsflabel)
library(patchwork)
library(plotly)
library(kableExtra)
library(DT)
library(viridis)
library(tinytex)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(beneficiaries)) %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(beneficiaries)) %>%
arrange(desc(beneficiaries))
}
revlog_trans <- function(base = exp(1)){
## Define the desired transformation.
trans <- function(x){
-log(x, base)
}
## Define the reverse of the desired transformation
inv <- function(x){
base^(-x)
}
## Creates the transformation
trans_new(paste("revlog-", base, sep = ""),
trans, ## The transformation function (can be defined using anonymous functions)
inv,  ## The reverse of the transformation
log_breaks(base = base), ## default way to define the scale breaks
domain = c(1e-100, Inf) ## The domain over which the transformation is valued
)
}
# reading in townships from geoadmins
townships <- read_excel("FSC 5W 2021 - GEOADMINS_final 19.xlsx",
sheet = "GEOADMINS") %>%
clean_names() %>%
select(admin1pcode_4:admin3pcode) %>%
rename(admin1_pcode = admin1pcode_4,
admin3_pcode = admin3pcode,
state_name   = state_5,
township_name  = county) %>%
remove_empty()
# locations dataset
locations <- bind_rows(
read_excel("FSC 5W 2021 - GEOADMINS_final 19.xlsx", # payams
sheet = "GEOADMINS") %>%
clean_names() %>%
select(state_name:payam_code) %>%
rename(admin1_pcode = state_code_12,
township_name = county_name,
admin3_pcode = county_code,
location = payam_name) %>%
remove_empty() %>%
mutate(location_type = paste0("payam")),
read_excel("FSC 5W 2021 - GEOADMINS_final 19.xlsx", # camps
sheet = "GEOADMINS") %>%
clean_names() %>%
select(county_name1:p_code_camp) %>%
rename(township_name = county_name1,
admin3_pcode = state_code_23,
location = camps,
camp_pcode = p_code_camp) %>%
remove_empty() %>%
mutate(location_type = paste0("camp")) %>%
left_join(townships %>% select(state_name, admin1_pcode, admin3_pcode),
by = c("admin3_pcode")) %>%
relocate(admin1_pcode) %>%
relocate(state_name),
read_excel("FSC 5W 2021 - GEOADMINS_final 19.xlsx", # industrial zones
sheet = "GEOADMINS") %>%
clean_names() %>%
select(state_28:industrial_zones) %>%
rename(state_name = state_28,
admin1_pcode = admin1pcode_29,
location = industrial_zones) %>%
remove_empty() %>%
regex_left_join(townships %>% select(township_name, admin3_pcode),
by = c("location" = "township_name")) %>%
# replacing the NAs with 0s so the filter doesn't drop them
replace_na(list(township_name = 0, admin3_pcode = 0, admin1_pcode = 0)) %>%
filter(admin3_pcode != "MMR013040") %>% # removing all the matches between Hlaingtharya and Hlaing
filter(admin3_pcode != "MMR011006") %>% # removing all the matches between Yenangyaung and Ye
mutate(location_type = paste0("industrial_zone"))
)%>%
mutate(location_code = case_when(location_type == "camp" ~ camp_pcode,
location_type == "payam" ~ payam_code,
location_type == "industrial_zone" ~ NA_character_)) %>%
mutate(locations_fuzzy = str_replace_all(location, "[[:punct:]]", ""),
locations_fuzzy = tolower(locations_fuzzy),
location = tolower(location))
# reading in pin and targets
pin <- read_excel("PIN calculation Food Security Cluster_Township Breakdown.xlsx",
sheet = "Food Sec PiN with IDPs",
skip = 2) %>%
clean_names() %>%
select(-c(x17, x18, x19)) %>%
slice(1:346) %>%
fill(region) %>%
rename(state = region,
idps = id_ps,
pop_minus_idps = population_minus_id_ps,
pin_2022 = vulnerable_food_insecure_people_id_ps) %>%
filter(township != "Total") %>%
mutate_at(vars(pop_minus_idps:moderately_severely), ~ as.numeric(.)) %>%
mutate(state = recode(state, "Shan East" = "Shan (East)",
"Shan North" = "Shan (North)",
"Ayeyawady" = "Ayeyarwady",
"Shan ((south))" = "Shan (South)",
"Naypyitaw" = "Nay Pyi Taw")) %>%
left_join(townships, by = c("township" = "township_name", "state" = "state_name")) %>%
relocate(admin3_pcode) %>% relocate(admin1_pcode) %>%
mutate(pc_vul = pin_2022 / total_pop,
pin_2022 = round(pin_2022, digits = 0)) %>%
left_join(read_excel("FSC PIN and Target _combine HRP and IERP 2021.xlsx") %>%
clean_names() %>%
select(admin3_pcode = tsp_pcode, pin_2021 = pin, target_2021 = target), by = "admin3_pcode") %>%
left_join(read_excel("fs_targets_2021.xlsx") %>%
clean_names() %>%
select(township = x1,
hrp_target_idps_2021 = internally_displaced_persons_12,
hrp_target_returnees_2021 = idp_returnees_resettled_locally_integrated_13,
hrp_target_stateless_rakhine_2021 = non_displaced_stateless_people_in_rakhine_14,
hrp_target_other_vulnerable_2021 = other_vulnerable_crisis_affected_people_15,
hrp_target_total = total_16) %>%
left_join(townships %>%  select(township_name, admin3_pcode), by = c("township" = "township_name")) %>%
select(-township),
by = "admin3_pcode") %>%
replace(is.na(.), 0) %>%
left_join(read_excel("FSC PIN and Target _combine HRP and IERP 2021.xlsx") %>%
clean_names() %>%
select(admin3_pcode = tsp_pcode, hrp_version), by = "admin3_pcode") %>%
mutate(hrp_version = recode(hrp_version,
"HRP 2021" = "hrp",
"HRP Addendum" = "ierp")) %>%
mutate(admin3_pcode = ifelse(admin3_pcode == "MMR007014" & state == "Yangon", "MMR013006", admin3_pcode),
admin3_pcode = ifelse(state == "Magway" & township == "Minhla", "MMR009013", admin3_pcode)) %>%
rename(target_2022 = target) %>%
# Yangon somehow has all their target and pin reversed?
mutate(pin_new = ifelse(state == "Yangon", target_2022, pin_2022),
target_new = ifelse(state == "Yangon", pin_2022, target_2022))
# this exists for the HRP / non-HRP column
hrp2021_adm3_list <- pin %>% filter(hrp_version == "hrp") %>% pull(admin3_pcode)
# reading in 5ws
fsc <- read_excel(
"FSC 5W 2021 - GEOADMINS_final 19_Jan to Dec 2021 IM Combined_Draft_28012022.xlsx",
sheet = "FSC 5W Activites",
skip = 5) %>%
janitor::clean_names() %>%
select(month_of_implementation:hrp_version) %>%
rename_all(~str_replace_all(., "^number_of_", "")) %>%
rename_all(~str_replace_all(., "^number_", "")) %>%
rename(admin5_pcode = admin3_pcode,
admin3_pcode = admin2_pcode,
beneficiaries = reached_beneficiaries,
households = reached_households,
beneficiary_type = beneficiaries_type) %>%
mutate(industrial_zones = replace(industrial_zones, industrial_zones == "No", NA),
frequency = replace(frequency, frequency == "N/A", NA)) %>%
mutate(location = case_when(camp != "NA" ~ camp,
industrial_zones != "NA" ~ industrial_zones,
village_ward_town != "NA" ~ village_ward_town)) %>%
mutate(location_type = case_when(camp != "NA" ~ "camp",
industrial_zones != "NA" ~ "industrial_zone",
village_ward_town != "NA" ~ "village_ward_town"),
locations_fuzzy = str_replace_all(location, "[[:punct:]]", " "),
locations_fuzzy = tolower(locations_fuzzy),
location = tolower(location)) %>%
mutate(total_value_mmk = value_per_household * households,
date            = my(month_of_implementation),
u_ben           = ifelse(unique_beneficiaries == "Yes", beneficiaries, 0)) %>%
mutate(state = as.character(fct_recode(state,
"Kachin" = "kachin")),
frequency = recode(frequency, "monthly" = "Monthly"),
township = recode(township, "kyaukme" = "Kyaukme")) %>%
mutate(new_value_hhd = total_value_usd / households,
new_value_person = total_value_usd / beneficiaries,
usd_hhd_bin =
case_when(new_value_hhd < 10 ~ "<$10",
new_value_hhd >= 10 & new_value_hhd < 20 ~ ">=$10_<$20",
new_value_hhd >= 20 & new_value_hhd < 30 ~ ">=$20_<$30",
new_value_hhd >= 30 & new_value_hhd < 40 ~ ">=$30_<$40",
new_value_hhd >= 40 & new_value_hhd < 50 ~ ">=$40_<$50",
new_value_hhd >= 50 & new_value_hhd < 60 ~ ">=$50_<$60",
new_value_hhd >= 60 & new_value_hhd < 70 ~ ">=$60_<$70",
new_value_hhd >= 70 & new_value_hhd < 80 ~ ">=$70_<$80",
new_value_hhd >= 80 & new_value_hhd < 90 ~ ">=$80_<$90",
new_value_hhd >= 90 & new_value_hhd < 100 ~ ">=$90_<$100",
new_value_hhd >= 100 ~ ">=$100",
TRUE ~ NA_character_),
usd_hhd_bin = fct_relevel(usd_hhd_bin, c("<$10", ">=$10_<$20", ">=$20_<$30", ">=$30_<$40", ">=$40_<$50",">=$50_<$60",
">=$60_<$70", ">=$70_<$80", ">=$80_<$90",">=$90_<$100",">=$100"))) %>%
mutate(hrp_indicator =
recode(hrp_indicator,
"Number of people who received food and/or cash assistance" =
"1.Number of people who received food and/or cash assistance",
"Number of people who received agriculture and other livelihood support, contributing to household food security" =
"2.Number of people who received agriculture and other livelihood support")) %>%
mutate(beneficiary_type = str_trim(beneficiary_type)) %>%
mutate(beneficiary_type = as.character(fct_recode(beneficiary_type,
"Rakhine stateless" = "Non-displaced stateless people in Rakhine"))) %>%
mutate(activity = recode(activity,
"Provide monthly food baskets through in-kind assistance to acutely food insecure population in rural areas" =
"Provide monthly food baskets",
"Provide technical training (agriculture, livestock breeding, livelihood)" = "Provide technical training",
"Provide support for Income Generating Activities" = "Provide support for income generation",
"Provide monthly cash-based transfers to acutely food insecure population in rural areas" =
"Provide monthly cash-based transfers",
"Cash for Work / Food for Assets activities" = "Cash for Work / Food for Assets",
"Provide fishery kits (in-kind / CBT)" = "Provide fishery kits",
"Provide crops & vegetables kits (in-kind / CBT)" = "Provide crops & vegetables kits",
"Provide livestock kits (in-kind / CBT)" = "Provide livestock kits")) %>%
mutate(implementing_partners = recode(implementing_partners,
"Save the children" = "Save the Children")) %>%
mutate(implementing_partner_type =
ifelse(implementing_partners %in% c("Kaw Lah Foundation", "Hakha Baptist Association (HBA)", "Arkan Research and Watch",
"Hlaing Development Network", "Mangrove Service Network (MSN)", "Kyal Sin May",
"Swan Saung Shin", "Sein Lei Ayeyar"), "NNGO", implementing_partner_type),
implementing_partner_type =
ifelse(implementing_partners %in% c("Single Touch Point Company Limited (STP)", "Neo Prospect Company Limited"),
"other", implementing_partner_type),
implementing_partner_type = ifelse(implementing_partners == "Helen Keller International", "INGO", implementing_partner_type)) %>%
mutate(hrp_ierp = case_when(admin3_pcode %in% hrp2021_adm3_list ~ "hrp",
date > "2021-05-01" ~ "ierp",
TRUE ~ "non_hrp")) %>%
mutate(covid_19_response = recode(covid_19_response,
"No" = "no", "Yes" = "yes"),
covid_19_response = replace_na(covid_19_response, "no"))
# ben dataset -- tidy format 5Ws for beneficiaries
ben <- fsc %>%
filter(unique_beneficiaries == "Yes") %>%
select(date,
implementing_partners, implementing_partner_type,
state, township, village_ward_town, location, location_type, admin1_pcode, admin3_pcode,
activity, activity_status, hrp_indicator, beneficiary_type,
child_male, child_female, adult_male, adult_female, elderly_male, elderly_female) %>%
pivot_longer(cols = child_male:elderly_female,
names_to = "disaggregation", values_to = "beneficiaries", values_drop_na = TRUE)
# shapefiles
pcode3_shape <- st_read("./mmr_polbnda_adm3_mimu_250k/mmr_polbnda_adm3_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE,
township = TS,
admin3_pcode = TS_PCODE) %>%
mutate(admin3_pcode = ifelse(str_detect(township, "Hlaingtharya"), "MMR013008", admin3_pcode))
# pcode3_shape <- st_read("./admin3 boundary old version/admin3 boundary old version.shp", quiet = TRUE) %>%
#   rename(state = ST,
#           admin1_pcode = ST_PCODE,
#           township = TS,
#           admin3_pcode = TS_PCODE)
# for relevelling -- this is in order of beneficiaries
sr_ord <- c("Yangon", "Rakhine", "Mandalay", "Ayeyarwady", "Magway", "Kachin", "Shan (North)", "Kayin",
"Mon", "Sagaing", "Kayah", "Chin", "Shan (South)", "Bago (East)", "Tanintharyi", "Shan (East)")
# for printing the targets of the pin
target_ben_2021 <- pin %>%
select(admin3_pcode, state, township, target_2021) %>%
filter(target_2021 > 0) %>%
left_join(ben %>%
group_by(admin3_pcode) %>%
summarise(beneficiaries = sum(beneficiaries)), by = "admin3_pcode") %>%
mutate(pc_reached = beneficiaries / target_2021 * 100) %>%
replace(is.na(.), 0)
# shows colours and hecx codes in palette
# show_col(hue_pal()(6))
cbind(
fsc %>%
filter(hrp_indicator == "1. # people received food and/or cash assistance" &
beneficiaries_recurrency %in% c("First", "One-off")) %>%
group_by(implementing_partners) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
arrange(desc(beneficiaries)) %>%
rename(`1. Number of people who received food and/or cash assistance` = beneficiaries,
`Partners HRP indicator1` = implementing_partners) %>%
head(10),
fsc %>%
filter(hrp_indicator == "2. # people received agri. and livelihood support" &
beneficiaries_recurrency %in% c("First", "One-off")) %>%
group_by(implementing_partners) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
arrange(desc(beneficiaries)) %>%
rename(`2. Number of people who received agriculture and other livelihood support` = beneficiaries,
`Partners HRP indicator2` = implementing_partners) %>%
head(10)
) %>%
add_column(` ` = " ") %>%
relocate(` `, .after = `1. Number of people who received food and/or cash assistance`) %>%
kbl(caption = "Top 10 implementing partners by beneficiaries reached, by HRP indicator",
format.args = list(big.mark = ","),
booktabs = TRUE, linesep = "") %>%
kable_styling(latex_options = c("hold_position", "striped", "scale_down")) %>%
footnote(general = "Figures reflect beneficiaries reached through direct implementation",
general_title = "")
cbind(
fsc %>%
filter(hrp_indicator == "1.Number of people who received food and/or cash assistance" &
beneficiaries_recurrency %in% c("First", "One-off")) %>%
group_by(implementing_partners) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
arrange(desc(beneficiaries)) %>%
rename(`1. Number of people who received food and/or cash assistance` = beneficiaries,
`Partners HRP indicator1` = implementing_partners) %>%
head(10),
fsc %>%
filter(hrp_indicator == "2.Number of people who received agriculture and other livelihood support" &
beneficiaries_recurrency %in% c("First", "One-off")) %>%
group_by(implementing_partners) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
arrange(desc(beneficiaries)) %>%
rename(`2. Number of people who received agriculture and other livelihood support` = beneficiaries,
`Partners HRP indicator2` = implementing_partners) %>%
head(10)
) %>%
add_column(` ` = " ") %>%
relocate(` `, .after = `1. Number of people who received food and/or cash assistance`) %>%
kable(caption = "Top 10 implementing partners by beneficiaries reached, by HRP indicator", format.args = list(big.mark = ",")) %>%
kable_classic_2("striped") %>%
footnote(general = "Figures reflect beneficiaries reached through direct implementation",
general_title = "")
