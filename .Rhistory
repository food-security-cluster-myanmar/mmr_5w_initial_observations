"FSC 5W 2021 - GEOADMINS_final19_(included All IP Reports)_Jan to Sep 2021_IM Combined_Final.xlsx",
sheet = "FSC 5W Activites",
skip = 5) %>%
janitor::clean_names() %>%
select(month_of_implementation:hrp_version) %>%
rename_all(~str_replace_all(., "^number_of_", "")) %>%
rename_all(~str_replace_all(., "^number_", "")) %>%
rename(admin4_pcode = admin3_pcode,
admin3_pcode = admin2_pcode,
beneficiaries = reached_beneficiaries,
households = reached_households,
beneficiary_type = beneficiaries_type) %>%
mutate(industrial_zones = replace(industrial_zones, industrial_zones == "No", NA),
frequency = replace(frequency, frequency == "N/A", NA)) %>%
mutate(location = case_when(camp != "NA" ~ camp,
industrial_zones != "NA" ~ industrial_zones,
village_ward_town != "NA" ~ village_ward_town)) %>%
mutate(location_type = case_when(camp != "NA" ~ "camp",
industrial_zones != "NA" ~ "industrial_zone",
village_ward_town != "NA" ~ "village_ward_town")) %>%
mutate(locations_fuzzy = str_replace_all(location, "[[:punct:]]", " ")) %>%
mutate(total_value_mmk = value_per_household * households) %>%
mutate(date = my(month_of_implementation)) %>%
mutate(u_ben = ifelse(unique_beneficiaries == "Yes", beneficiaries, 0)) %>%
mutate(state = as.character(fct_recode(state,
"Kachin" = "kachin"))) %>%
mutate(mmk_hhd_bin = case_when(value_per_household < 10000 ~ "below_10k",
value_per_household >= 10000 & value_per_household <= 20000 ~ "10k_20k",
value_per_household > 20000 & value_per_household <= 50000 ~ "20k_50k",
value_per_household > 50000 & value_per_household <= 70000 ~ "50k_70k",
value_per_household > 70000 & value_per_household < 100000 ~ "70k_100k",
value_per_household >= 100000 & value_per_household < 200000 ~ "100k_200k",
value_per_household >= 200000 & value_per_household <= 300000 ~ "200k_300k",
value_per_household > 300000 ~ "above_300k",
TRUE ~ NA_character_),
mmk_hhd_bin = fct_relevel(mmk_hhd_bin, c("less_than_10k", "10k_20k","20k_50k", "50k_70k", "70k_100k", "100k_200k",
"200k_300k","more_than_300k")),
frequency = recode(frequency, "monthly" = "Monthly")) %>%
mutate(usd_hhd_bin =
case_when(value_per_household_usd < 10 ~ "<$10",
value_per_household_usd >= 10 & value_per_household_usd < 20 ~ ">=$10_<$20",
value_per_household_usd >= 20 & value_per_household_usd < 40 ~ ">=$20_<$40",
value_per_household_usd >= 40 & value_per_household_usd < 60 ~ ">=$40_<$60",
value_per_household_usd >= 60 & value_per_household_usd < 100 ~ ">=$60_<$100",
value_per_household_usd >= 100 & value_per_household_usd < 200 ~ ">=$100_<$200",
value_per_household_usd >= 200 ~ ">=$200",
TRUE ~ NA_character_),
usd_hhd_bin = fct_relevel(usd_hhd_bin, c("<$10", ">=$10_<$20", ">=$20_<$40", ">=$40_<$60",
">=$60_<$100", ">=$100_<$200", ">=$200"))) %>%
mutate(hrp_indicator =
recode(hrp_indicator,
"Number of people who received food and/or cash assistance" =
"1. Number of people who received food and/or cash assistance",
"Number of people who received agriculture and other livelihood support, contributing to household food security" =
"2. Number of people who received agriculture and other livelihood support")) %>%
mutate(beneficiary_type = str_trim(beneficiary_type)) %>%
mutate(beneficiary_type = as.character(fct_recode(beneficiary_type,
"Rakhine stateless" = "Non-displaced stateless people in Rakhine"))) %>%
mutate(activity = recode(activity,
"Provide monthly food baskets through in-kind assistance to acutely food insecure population in rural areas" =
"Provide monthly food baskets",
"Provide technical training (agriculture, livestock breeding, livelihood)" = "Provide technical training",
"Provide support for Income Generating Activities" = "Provide support for income generation",
"Provide monthly cash-based transfers to acutely food insecure population in rural areas" =
"Provide monthly cash-based transfers",
"Cash for Work / Food for Assets activities" = "Cash for Work / Food for Assets",
"Provide fishery kits (in-kind / CBT)" = "Provide fishery kits",
"Provide crops & vegetables kits (in-kind / CBT)" = "Provide crops & vegetables kits",
"Provide livestock kits (in-kind / CBT)" = "Provide livestock kits"))
# ben dataset -- tidy format 5Ws for beneficiaries
ben <- fsc %>%
filter(unique_beneficiaries == "Yes") %>%
select(date,
implementing_partners, implementing_partner_type,
state, township, village_ward_town, location, location_type, admin1_pcode, admin3_pcode,
activity, activity_status, hrp_indicator, beneficiary_type,
child_male, child_female, adult_male, adult_female, elderly_male, elderly_female) %>%
pivot_longer(cols = child_male:elderly_female,
names_to = "disaggregation", values_to = "beneficiaries", values_drop_na = TRUE)
# reading in pin and targets
pin <- read_excel("PIN calculation Food Security Cluster_Township Breakdown.xlsx",
sheet = "Food Sec PiN with IDPs",
skip = 2) %>%
clean_names() %>%
select(-c(x17, x18, x19)) %>%
slice(1:346) %>%
fill(region) %>%
rename(state = region,
idps = id_ps,
pop_minus_idps = population_minus_id_ps,
pin_2022 = vulnerable_food_insecure_people_id_ps) %>%
filter(township != "Total") %>%
mutate_at(vars(pop_minus_idps:moderately_severely), ~ as.numeric(.)) %>%
left_join(townships, by = c("township" = "township_name")) %>%
select(-state) %>%
relocate(admin3_pcode) %>% relocate(state = state_name) %>% relocate(admin1_pcode) %>%
mutate(pc_vul = pin_2022 / total_pop,
pin_2022 = round(pin_2022, digits = 0)) %>%
left_join(read_excel("FSC PIN and Target _combine HRP and IERP 2021.xlsx") %>%
clean_names() %>%
select(admin3_pcode = tsp_pcode, pin_2021 = pin, target_2021 = target), by = "admin3_pcode") %>%
left_join(read_excel("fs_targets_2021.xlsx") %>%
clean_names() %>%
select(township = x1,
hrp_target_idps_2021 = internally_displaced_persons_12,
hrp_target_returnees_2021 = idp_returnees_resettled_locally_integrated_13,
hrp_target_stateless_rakhine_2021 = non_displaced_stateless_people_in_rakhine_14,
hrp_target_other_vulnerable_2021 = other_vulnerable_crisis_affected_people_15,
hrp_target_total = total_16) %>%
left_join(townships %>%  select(township_name, admin3_pcode), by = c("township" = "township_name")) %>%
select(-township),
by = "admin3_pcode") %>%
replace(is.na(.), 0)
# shapefiles
pcode3_shape <- st_read("./mmr_polbnda_adm3_mimu_250k/mmr_polbnda_adm3_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE,
township = TS,
admin3_pcode = TS_PCODE)
pcode1_shape <- st_read("./mmr_polbnda2_adm1_mimu_250k/mmr_polbnda2_adm1_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE)
# for relevelling -- this is in order of beneficiaries
sr_ord <- c("Yangon", "Rakhine", "Kachin", "Shan (North)", "Ayeyarwady" , "Kayin", "Mon", "Mandalay",
"Kayah", "Chin", "Shan (South)", "Sagaing", "Bago (East)", "Magway", "Shan (East)", "Bago (West)", "Tanintharyi")
# for printing the targets of the pin
target_ben_2021 <- pin %>%
select(admin3_pcode, state, township, target_2021) %>%
filter(target_2021 > 0) %>%
left_join(ben %>%
group_by(admin3_pcode) %>%
summarise(beneficiaries = sum(beneficiaries)), by = "admin3_pcode") %>%
mutate(pc_reached = beneficiaries / target_2021 * 100) %>%
replace(is.na(.), 0)
fsc %>%
filter(!is.na(delivery_modality)) %>%
group_by(delivery_modality, activity) %>%
summarise(beneficiaries = sum(beneficiaries), .groups = "drop") %>%
mutate(delivery_modality = recode(delivery_modality,
"Hybrid (In-kind & Cash)" = "Hybrid",
"Service delivery/support" = "Services/support")) %>%
ggplot(aes(x = delivery_modality, y = beneficiaries, fill = activity)) +
geom_col() +
scale_y_continuous(labels = comma) +
labs(x = "",
title = "Delivery modality by activity, 2021 Q1-Q3") +
theme(plot.title = element_text(size = 12),
legend.position = "none",
axis.text.x = element_text(angle = 40, hjust = 0.5, vjust = 0.5)) +
facet_wrap(~ activity, scales = "free_y")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(fuzzyjoin)
library(scales)
library(magrittr)
library(sf)
library(bookdown)
library(data.table)
library(plotly)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
fscben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(reached_beneficiaries)) %>%
arrange(desc(beneficiaries))
}
mmr <- read_excel("MIMU_BaselineData_AllSectors_Countrywide_18Mar2021_revised.xlsm",
sheet = "Township",
skip = 5) %>%
janitor::clean_names() %>%
pivot_longer(cols = starts_with("x"), names_to = "year", values_to = "value", values_drop_na = TRUE) %>%
mutate(year = str_replace_all(year, "x", ""))%>%
rename(years = year) %>%
mutate(year = substr(years, nchar(years) - 3, nchar(years))) # year is now most-recent year
mmr %>% count(source_name, sort = TRUE)
glimpse(mmr)
mmr %>% filter(str_detect(indicator_name, "hard"))
mmr %>%  count(indicator_name)
st_read("./hard_to_reach_vt_may2019/hard_to_reach_vt_may2019.shp", quiet = TRUE)
st_read("./hard_to_reach_vt_may2019/hard_to_reach_vt_may2019.shp", quiet = TRUE) %>%
glimpse()
st_read("./hard_to_reach_vt_may2019/hard_to_reach_vt_may2019.shp", quiet = TRUE) %>%
select(state = ST, township = TS, VT = village_tract, category = Category) %>%
st_read("./hard_to_reach_vt_may2019/hard_to_reach_vt_may2019.shp", quiet = TRUE) %>%
select(state = ST, township = TS, VT = village_tract, category = Category) %>%
count(category)
st_read("./hard_to_reach_vt_may2019/hard_to_reach_vt_may2019.shp", quiet = TRUE) %>%
select(state = ST, township = TS, village_tract = VT, category = Category) %>%
count(category)
st_read("./hard_to_reach_vt_may2019/hard_to_reach_vt_may2019.shp", quiet = TRUE) %>%
count(Category)
st_read("./hard_to_reach_vt_may2019/hard_to_reach_vt_may2019.shp", quiet = TRUE)
st_read("./hard_to_reach_vt_may2019/hard_to_reach_vt_may2019.shp", quiet = TRUE) %>%
left_join(pin, by = c("TS_PCODE" = "admin3_pcode"))
st_read("./hard_to_reach_vt_may2019/hard_to_reach_vt_may2019.shp", quiet = TRUE) %>%
group_by(TS_PCODE) %>%
summarise(categories = n_distinct(Category))
fsc %>%
filter(township %in% c("Bhamo", "Mogaung", "Momauk", "Myitkyina")) %>%
group_by(township) %>%
summarise(partners = n_distinct(partners))
fsc %>%
filter(township %in% c("Bhamo", "Mogaung", "Momauk", "Myitkyina")) %>%
group_by(township) %>%
summarise(partners = n_distinct(implementing_partners))
fsc %>%
filter(township %in% c("Bhamo", "Mogaung", "Momauk", "Myitkyina")) %>%
distinct(implementing_partners)
fsc %>%
filter(township %in% c("Bhamo", "Mogaung", "Momauk", "Myitkyina")) %>%
group_by(implementing_partners, township) %>%
summarise(beneficiaries = sum(beneficiaries))
fsc %>%
filter(township %in% c("Bhamo", "Mogaung", "Momauk", "Myitkyina")) %>%
group_by(implementing_partners, township) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
pivot_wider(names_from = township, values_from = beneficiaries)
fsc %>%
filter(township %in% c("Bhamo", "Mogaung", "Momauk", "Myitkyina")) %>%
group_by(implementing_partners, township) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
pivot_wider(names_from = township, values_from = beneficiaries) %>%
write_csv("fsc_partners_Bhamo_Mogaung_Momauk_Myitkyina_2021JantoSep.csv")
fsc %>%
filter(township %in% c("Bhamo", "Mogaung", "Momauk", "Myitkyina")) %>%
filter(unique_beneficiaries == "TRUE") %>%
group_by(implementing_partners, township, hrp_indicator, activity) %>%
summarise(beneficiaries = sum(beneficiaries))
fsc %>%
filter(township %in% c("Bhamo", "Mogaung", "Momauk", "Myitkyina")) %>%
filter(unique_beneficiaries == "Yes") %>%
group_by(implementing_partners, township, hrp_indicator, activity) %>%
summarise(beneficiaries = sum(beneficiaries))
fsc %>%
filter(township %in% c("Bhamo", "Mogaung", "Momauk", "Myitkyina")) %>%
filter(unique_beneficiaries == "Yes") %>%
group_by(implementing_partners, township, hrp_indicator, activity) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
pivot_wider(names_from = township, values_from = beneficiaries)
fsc %>%
filter(township %in% c("Bhamo", "Mogaung", "Momauk", "Myitkyina")) %>%
filter(unique_beneficiaries == "Yes") %>%
group_by(implementing_partners, township, hrp_indicator, activity) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
pivot_wider(names_from = township, values_from = beneficiaries) %>%
write_csv("fsc_partners_Bhamo_Mogaung_Momauk_Myitkyina_2021JantoSep.csv")
fsc %>%
filter(state == "Yangon" & unique_beneficiaries == "Yes") %>% glimpse()
fsc %>%
filter(state == "Yangon" & unique_beneficiaries == "Yes") %>%
group_by(activity, conditionality) %>%
summarise(beneficiaries = sum(beneficiaries))
fsc %>% count(conditionality)
fsc %>% glimpse()
fsc %>% count(months_of_food_ration_distributed)
fsc %>% count(months_of_food_ration_distributed, sort = TRUE)
fsc %>%
mutate(recode(months_of_food_ration_distributed,
"1" = "1_month",
"one month" = "1_month",
"1 month" = "1_month",
"2" = "2_months",
"2 months" = "2_months",
"3" = "3_months",
"3 months" = "3_months",
"June, July,August" = "3_months",
"4 months" = "4_months",
"5" = "5_months",
"5 th times" = "5_months",
"6" = "6_months",
"7" = "7_months")) %>%
group_by(months_of_food_ration_distributed) %>%
summarise(beneficiaries)
fsc %>%
mutate(months_of_food_ration_distributed = recode(months_of_food_ration_distributed,
"1" = "1_month",
"one month" = "1_month",
"1 month" = "1_month",
"2" = "2_months",
"2 months" = "2_months",
"3" = "3_months",
"3 months" = "3_months",
"June, July,August" = "3_months",
"4 months" = "4_months",
"5" = "5_months",
"5 th times" = "5_months",
"6" = "6_months",
"7" = "7_months")) %>%
group_by(months_of_food_ration_distributed) %>%
summarise(beneficiaries)
fsc %>%
mutate(months_of_food_ration_distributed = recode(months_of_food_ration_distributed,
"1" = "1_month",
"one month" = "1_month",
"1 month" = "1_month",
"2" = "2_months",
"2 months" = "2_months",
"3" = "3_months",
"3 months" = "3_months",
"June, July,August" = "3_months",
"4 months" = "4_months",
"5" = "5_months",
"5 th times" = "5_months",
"6" = "6_months",
"7" = "7_months")) %>%
count(months_of_food_ration_distributed)
fsc %>%
mutate(months_of_food_ration_distributed = recode(months_of_food_ration_distributed,
"1" = "1_month",
"one month" = "1_month",
"1 month" = "1_month",
"2" = "2_months",
"2 months" = "2_months",
"3" = "3_months",
"3 months" = "3_months",
"June, July,August" = "3_months",
"4 months" = "4_months",
"5" = "5_months",
"5 th times" = "5_months",
"6" = "6_months",
"7" = "7_months")) %>%
count(months_of_food_ration_distributed, sort = TRUE)
fsc %>%
mutate(months_of_food_ration_distributed = recode(months_of_food_ration_distributed,
"1" = "1_month",
"one month" = "1_month",
"1 month" = "1_month",
"2" = "2_months",
"2 months" = "2_months",
"3" = "3_months",
"3 months" = "3_months",
"June, July,August" = "3_months",
"4 months" = "4_months",
"5" = "5_months",
"5 th times" = "5_months",
"6" = "6_months",
"7" = "7_months")) %>%
group_by(months_of_food_ration_distributed) %>%
summarise(beneficiaries)
fsc %>%
mutate(months_of_food_ration_distributed = recode(months_of_food_ration_distributed,
"1" = "1_month",
"one month" = "1_month",
"1 month" = "1_month",
"2" = "2_months",
"2 months" = "2_months",
"3" = "3_months",
"3 months" = "3_months",
"June, July,August" = "3_months",
"4 months" = "4_months",
"5" = "5_months",
"5 th times" = "5_months",
"6" = "6_months",
"7" = "7_months")) %>%
group_by(months_of_food_ration_distributed) %>%
summarise(beneficiaries) %>%  arrange(desc(beneficiaries))
fsc %>%
mutate(months_of_food_ration_distributed = recode(months_of_food_ration_distributed,
"1" = "1_month",
"one month" = "1_month",
"1 month" = "1_month",
"2" = "2_months",
"2 months" = "2_months",
"3" = "3_months",
"3 months" = "3_months",
"June, July,August" = "3_months",
"4 months" = "4_months",
"5" = "5_months",
"5 th times" = "5_months",
"6" = "6_months",
"7" = "7_months")) %>%
group_by(months_of_food_ration_distributed) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%  arrange(desc(beneficiaries))
fsc %>%
mutate(months_of_food_ration_distributed = recode(months_of_food_ration_distributed,
"1" = "1_month",
"one month" = "1_month",
"1 month" = "1_month",
"2" = "2_months",
"2 months" = "2_months",
"3" = "3_months",
"3 months" = "3_months",
"June, July,August" = "3_months",
"March to May" = "3_months",
"4 months" = "4_months",
"5" = "5_months",
"5 th times" = "5_months",
"6" = "6_months",
"7" = "7_months")) %>%
group_by(months_of_food_ration_distributed) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%  arrange(desc(beneficiaries))
fsc %>%
mutate(months_of_food_ration_distributed = recode(months_of_food_ration_distributed,
"1" = "1_month",
"one month" = "1_month",
"1 month" = "1_month",
"2" = "2_months",
"2 months" = "2_months",
"3" = "3_months",
"3 months" = "3_months",
"June, July,August" = "3_months",
"March to May" = "3_months",
"4 months" = "4_months",
"5" = "5_months",
"5 th times" = "5_months",
"6" = "6_months",
"7" = "7_months")) %>%
filter(!is.na(months_of_food_ration_distributed)) %>%
group_by(months_of_food_ration_distributed) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%  arrange(desc(beneficiaries))
fsc %>%
mutate(months_of_food_ration_distributed = recode(months_of_food_ration_distributed,
"1" = "1_month",
"one month" = "1_month",
"1 month" = "1_month",
"2" = "2_months",
"2 months" = "2_months",
"3" = "3_months",
"3 months" = "3_months",
"June, July,August" = "3_months",
"March to May" = "3_months",
"4 months" = "4_months",
"5" = "5_months",
"5 th times" = "5_months",
"6" = "6_months",
"7" = "7_months")) %>%
filter(str_detect(months_of_food_ration_distributed, "_month")) %>%
group_by(months_of_food_ration_distributed) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%  arrange(desc(beneficiaries))
fsc %>%
mutate(months_of_food_ration_distributed = recode(months_of_food_ration_distributed,
"1" = "1_month",
"one month" = "1_month",
"1 month" = "1_month",
"2" = "2_months",
"2 months" = "2_months",
"3" = "3_months",
"3 months" = "3_months",
"June, July,August" = "3_months",
"March to May" = "3_months",
"4 months" = "4_months",
"5" = "5_months",
"5 th times" = "5_months",
"6" = "6_months",
"7" = "7_months")) %>%
filter(str_detect(months_of_food_ration_distributed, "_month")) %>%
group_by(months_of_food_ration_distributed, activity) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%  arrange(desc(beneficiaries))
fsc %>%
mutate(months_of_food_ration_distributed = recode(months_of_food_ration_distributed,
"1" = "1_month",
"one month" = "1_month",
"1 month" = "1_month",
"2" = "2_months",
"2 months" = "2_months",
"3" = "3_months",
"3 months" = "3_months",
"June, July,August" = "3_months",
"March to May" = "3_months",
"4 months" = "4_months",
"5" = "5_months",
"5 th times" = "5_months",
"6" = "6_months",
"7" = "7_months")) %>%
filter(str_detect(months_of_food_ration_distributed, "_month")) %>%
group_by(months_of_food_ration_distributed, activity) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
pivot_wider(names_from = activity, values_from = beneficiaries)
fsc %>%
mutate(months_of_food_ration_distributed = recode(months_of_food_ration_distributed,
"1" = "1_month",
"one month" = "1_month",
"1 month" = "1_month",
"2" = "2_months",
"2 months" = "2_months",
"3" = "3_months",
"3 months" = "3_months",
"June, July,August" = "3_months",
"March to May" = "3_months",
"4 months" = "4_months",
"5" = "5_months",
"5 th times" = "5_months",
"6" = "6_months",
"7" = "7_months")) %>%
filter(str_detect(months_of_food_ration_distributed, "_month")) %>%
group_by(months_of_food_ration_distributed, usd_hhd_bin) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
pivot_wider(names_from = usd_hhd_bin, values_from = beneficiaries)
