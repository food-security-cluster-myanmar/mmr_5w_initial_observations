townships = n_distinct(admin3_pcode),
states = n_distinct(admin1_pcode), .groups = "drop") %>%
group_by(implementing_partner_type) %>%
summarise(avg_beneficiaries = round(mean(beneficiaries)),
avg_townships = round(mean(townships), digits = 2),
avg_states = round(mean(states), digits = 2),
.groups = "drop") %>%
mutate(implementing_partner_type = fct_relevel(implementing_partner_type, levels = c("INGO", "NNGO", "UN", "other"))) %>%
kable(caption = "Average reach by implementing partner type", format.args = list(big.mark = ",")) %>%
kable_classic_2()
fsc %>%
filter(unique_beneficiaries == "Yes") %>%
group_by(donor) %>%
summarise(beneficiaries = sum(beneficiaries),
townships = n_distinct(admin3_pcode)) %>%
mutate(pc_of_ben = round(beneficiaries / sum(beneficiaries) * 100, digits = 2)) %>%
relocate(pc_of_ben, .after = beneficiaries)
fsc %>%
filter(unique_beneficiaries == "Yes") %>%
group_by(donor) %>%
summarise(beneficiaries = sum(beneficiaries),
townships = n_distinct(admin3_pcode)) %>%
mutate(pc_of_ben = round(beneficiaries / sum(beneficiaries) * 100, digits = 2)) %>%
relocate(pc_of_ben, .after = beneficiaries) %>%
filter(!is.na(donor)) %>%
arrange(desc(beneficiaries)) %>%
head(11) %>%
kable(caption = "Top 10 donors by number of beneficiaries reached with their funding", format.args = list(big.mark = ",")) %>%
kable_classic_2(lightable_options = c("striped")) %>%
footnote(general = "77% of all beneficiaries reported had the `donor` column blank", general_title = "")
fsc %>%
filter(unique_beneficiaries == "Yes") %>%
group_by(donor) %>%
summarise(beneficiaries = sum(beneficiaries),
townships = n_distinct(admin3_pcode)) %>%
mutate(pc_of_ben = round(beneficiaries / sum(beneficiaries) * 100, digits = 2)) %>%
relocate(pc_of_ben, .after = beneficiaries)
gap_months %>%
filter(recurrences > 5) %>%
group_by(activity) %>%
summarise(partners = n_distinct(implementing_partners),
locations = n(),
beneficiaries = sum(ben_max)) %>%
arrange(desc(beneficiaries)) %>%
kable(caption = "Number of beneficiaries, by activity, who have received at least 6 months of recurrent food security support",
format.args = list(big.mark = ",")) %>%
kable_classic_2()
gap_months %>%
filter(recurrences > 5) %>%
group_by(activity) %>%
summarise(partners = n_distinct(implementing_partners),
locations = n(),
beneficiaries = sum(ben_max)) %>%
arrange(desc(beneficiaries)) %>%
kable(caption = "Number of beneficiaries, by activity, who have received at least 6 months of recurrent food security support",
format.args = list(big.mark = ",")) %>%
kable_classic_2() %>%
footnote("Only includes beneficiaries (no unique, maximum by location by activity) who have received more than 6 months of support")
gap_months %>%
filter(recurrences > 5) %>%
group_by(activity, implementing_partners) %>%
summarise(beneficiaries = sum(ben_max), .groups = "drop") %>%
filter(activity == "Provide monthly food baskets" | activity == "Provide monthly cash-based transfers") %>%
pivot_wider(names_from = activity, values_from = beneficiaries) %>%
kable(caption = "Partners who have implemented cash transfers and food baskets for at least 6 months",
format.args = list(big.mark = ",")) %>%
kable_classic_2("striped") %>%
footnote(general = "Only beneficiaries who have received more than 6 months of support are included",
general_title = "")
gap_months %>%
filter(recurrences > 5) %>%
group_by(activity, implementing_partners) %>%
summarise(beneficiaries = sum(ben_max), .groups = "drop") %>%
filter(activity == "Provide monthly food baskets" | activity == "Provide monthly cash-based transfers") %>%
pivot_wider(names_from = activity, values_from = beneficiaries) %>%
kable(caption = "Partners who have implemented cash transfers and food baskets for at least 6 months",
format.args = list(big.mark = ",")) %>%
kable_classic_2("striped") %>%
footnote(general = "Only beneficiaries (not unique, maximum by location and activity) who have received more than 6 months of support are included",
general_title = "")
# I don't think this is necessary
hrp_act_ord <- fsc %>%
filter(hrp_ierp != "non_hrp" & unique_beneficiaries == "Yes") %>%
sum_ben(activity)
fsc %>%
filter(unique_beneficiaries == "Yes" & hrp_ierp != "non_hrp") %>%
sum_ben(activity) %>%
mutate(pc_of_ben = round(beneficiaries / sum(beneficiaries) * 100, digits = 2))
hrp_act <- fsc %>%
filter(unique_beneficiaries == "Yes" & hrp_ierp != "non_hrp") %>%
sum_ben(activity) %>%
mutate(pc_of_ben = round(beneficiaries / sum(beneficiaries) * 100, digits = 2))
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(fuzzyjoin)
library(scales)
library(magrittr)
library(sf)
library(s2)
library(bookdown)
library(data.table)
library(ggsflabel)
library(patchwork)
library(plotly)
library(kableExtra)
library(DT)
library(viridis)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(beneficiaries)) %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(beneficiaries)) %>%
arrange(desc(beneficiaries))
}
# reading in townships from geoadmins
townships <- read_excel("FSC 5W 2021 - GEOADMINS_final 19.xlsx",
sheet = "GEOADMINS") %>%
clean_names() %>%
select(admin1pcode_4:admin3pcode) %>%
rename(admin1_pcode = admin1pcode_4,
admin3_pcode = admin3pcode,
state_name   = state_5,
township_name  = county) %>%
remove_empty()
# locations dataset
locations <- bind_rows(
read_excel("FSC 5W 2021 - GEOADMINS_final 19.xlsx", # payams
sheet = "GEOADMINS") %>%
clean_names() %>%
select(state_name:payam_code) %>%
rename(admin1_pcode = state_code_12,
township_name = county_name,
admin3_pcode = county_code,
location = payam_name) %>%
remove_empty() %>%
mutate(location_type = paste0("payam")),
read_excel("FSC 5W 2021 - GEOADMINS_final 19.xlsx", # camps
sheet = "GEOADMINS") %>%
clean_names() %>%
select(county_name1:p_code_camp) %>%
rename(township_name = county_name1,
admin3_pcode = state_code_23,
location = camps,
camp_pcode = p_code_camp) %>%
remove_empty() %>%
mutate(location_type = paste0("camp")) %>%
left_join(townships %>% select(state_name, admin1_pcode, admin3_pcode),
by = c("admin3_pcode")) %>%
relocate(admin1_pcode) %>%
relocate(state_name),
read_excel("FSC 5W 2021 - GEOADMINS_final 19.xlsx", # industrial zones
sheet = "GEOADMINS") %>%
clean_names() %>%
select(state_28:industrial_zones) %>%
rename(state_name = state_28,
admin1_pcode = admin1pcode_29,
location = industrial_zones) %>%
remove_empty() %>%
regex_left_join(townships %>% select(township_name, admin3_pcode),
by = c("location" = "township_name")) %>%
# replacing the NAs with 0s so the filter doesn't drop them
replace_na(list(township_name = 0, admin3_pcode = 0, admin1_pcode = 0)) %>%
filter(admin3_pcode != "MMR013040") %>% # removing all the matches between Hlaingtharya and Hlaing
filter(admin3_pcode != "MMR011006") %>% # removing all the matches between Yenangyaung and Ye
mutate(location_type = paste0("industrial_zone"))
)%>%
mutate(location_code = case_when(location_type == "camp" ~ camp_pcode,
location_type == "payam" ~ payam_code,
location_type == "industrial_zone" ~ NA_character_)) %>%
mutate(locations_fuzzy = str_replace_all(location, "[[:punct:]]", ""))
# reading in pin and targets
pin <- read_excel("PIN calculation Food Security Cluster_Township Breakdown.xlsx",
sheet = "Food Sec PiN with IDPs",
skip = 2) %>%
clean_names() %>%
select(-c(x17, x18, x19)) %>%
slice(1:346) %>%
fill(region) %>%
rename(state = region,
idps = id_ps,
pop_minus_idps = population_minus_id_ps,
pin_2022 = vulnerable_food_insecure_people_id_ps) %>%
filter(township != "Total") %>%
mutate_at(vars(pop_minus_idps:moderately_severely), ~ as.numeric(.)) %>%
mutate(state = recode(state, "Shan East" = "Shan (East)",
"Shan North" = "Shan (North)",
"Ayeyawady" = "Ayeyarwady",
"Shan ((south))" = "Shan (South)",
"Naypyitaw" = "Nay Pyi Taw")) %>%
left_join(townships, by = c("township" = "township_name", "state" = "state_name")) %>%
relocate(admin3_pcode) %>% relocate(admin1_pcode) %>%
mutate(pc_vul = pin_2022 / total_pop,
pin_2022 = round(pin_2022, digits = 0)) %>%
left_join(read_excel("FSC PIN and Target _combine HRP and IERP 2021.xlsx") %>%
clean_names() %>%
select(admin3_pcode = tsp_pcode, pin_2021 = pin, target_2021 = target), by = "admin3_pcode") %>%
left_join(read_excel("fs_targets_2021.xlsx") %>%
clean_names() %>%
select(township = x1,
hrp_target_idps_2021 = internally_displaced_persons_12,
hrp_target_returnees_2021 = idp_returnees_resettled_locally_integrated_13,
hrp_target_stateless_rakhine_2021 = non_displaced_stateless_people_in_rakhine_14,
hrp_target_other_vulnerable_2021 = other_vulnerable_crisis_affected_people_15,
hrp_target_total = total_16) %>%
left_join(townships %>%  select(township_name, admin3_pcode), by = c("township" = "township_name")) %>%
select(-township),
by = "admin3_pcode") %>%
replace(is.na(.), 0) %>%
left_join(read_excel("FSC PIN and Target _combine HRP and IERP 2021.xlsx") %>%
clean_names() %>%
select(admin3_pcode = tsp_pcode, hrp_version), by = "admin3_pcode") %>%
mutate(hrp_version = recode(hrp_version,
"HRP 2021" = "hrp",
"HRP Addendum" = "ierp")) %>%
mutate(admin3_pcode = ifelse(admin3_pcode == "MMR007014" & state == "Yangon", "MMR013006", admin3_pcode),
admin3_pcode = ifelse(state == "Magway" & township == "Minhla", "MMR009013", admin3_pcode)) %>%
rename(target_2022 = target) %>%
# Yangon somehow has all their target and pin reversed?
mutate(pin_new = ifelse(state == "Yangon", target_2022, pin_2022),
target_new = ifelse(state == "Yangon", pin_2022, target_2022))
# this exists for the HRP / non-HRP column
hrp2021_adm3_list <- pin %>% filter(hrp_version == "hrp") %>% pull(admin3_pcode)
# reading in 5ws
fsc <- read_excel(
"FSC 5W 2021 - GEOADMINS_final 19_Jan to Dec 2021 IM Combined_Draft_28012022.xlsx",
sheet = "FSC 5W Activites",
skip = 5) %>%
janitor::clean_names() %>%
select(month_of_implementation:hrp_version) %>%
rename_all(~str_replace_all(., "^number_of_", "")) %>%
rename_all(~str_replace_all(., "^number_", "")) %>%
rename(admin4_pcode = admin3_pcode,
admin3_pcode = admin2_pcode,
beneficiaries = reached_beneficiaries,
households = reached_households,
beneficiary_type = beneficiaries_type) %>%
mutate(industrial_zones = replace(industrial_zones, industrial_zones == "No", NA),
frequency = replace(frequency, frequency == "N/A", NA)) %>%
mutate(location = case_when(camp != "NA" ~ camp,
industrial_zones != "NA" ~ industrial_zones,
village_ward_town != "NA" ~ village_ward_town)) %>%
mutate(location_type = case_when(camp != "NA" ~ "camp",
industrial_zones != "NA" ~ "industrial_zone",
village_ward_town != "NA" ~ "village_ward_town"),
locations_fuzzy = str_replace_all(location, "[[:punct:]]", " ")) %>%
mutate(total_value_mmk = value_per_household * households,
date            = my(month_of_implementation),
u_ben           = ifelse(unique_beneficiaries == "Yes", beneficiaries, 0)) %>%
mutate(state = as.character(fct_recode(state,
"Kachin" = "kachin")),
frequency = recode(frequency, "monthly" = "Monthly"),
township = recode(township, "kyaukme" = "Kyaukme")) %>%
mutate(new_value_hhd = total_value_usd / households,
new_value_person = total_value_usd / beneficiaries,
usd_hhd_bin =
case_when(new_value_hhd < 10 ~ "<$10",
new_value_hhd >= 10 & new_value_hhd < 20 ~ ">=$10_<$20",
new_value_hhd >= 20 & new_value_hhd < 40 ~ ">=$20_<$40",
new_value_hhd >= 40 & new_value_hhd < 60 ~ ">=$40_<$60",
new_value_hhd >= 60 & new_value_hhd < 80 ~ ">=$60_<$80",
new_value_hhd >= 80 & new_value_hhd < 100 ~ ">=$80_<$100",
new_value_hhd >= 100 ~ ">=$100",
TRUE ~ NA_character_),
usd_hhd_bin = fct_relevel(usd_hhd_bin, c("<$10", ">=$10_<$20", ">=$20_<$40", ">=$40_<$60",
">=$60_<$80", ">=$80_<$100", ">=$100"))) %>%
mutate(hrp_indicator =
recode(hrp_indicator,
"Number of people who received food and/or cash assistance" =
"1.Number of people who received food and/or cash assistance",
"Number of people who received agriculture and other livelihood support, contributing to household food security" =
"2.Number of people who received agriculture and other livelihood support")) %>%
mutate(beneficiary_type = str_trim(beneficiary_type)) %>%
mutate(beneficiary_type = as.character(fct_recode(beneficiary_type,
"Rakhine stateless" = "Non-displaced stateless people in Rakhine"))) %>%
mutate(activity = recode(activity,
"Provide monthly food baskets through in-kind assistance to acutely food insecure population in rural areas" =
"Provide monthly food baskets",
"Provide technical training (agriculture, livestock breeding, livelihood)" = "Provide technical training",
"Provide support for Income Generating Activities" = "Provide support for income generation",
"Provide monthly cash-based transfers to acutely food insecure population in rural areas" =
"Provide monthly cash-based transfers",
"Cash for Work / Food for Assets activities" = "Cash for Work / Food for Assets",
"Provide fishery kits (in-kind / CBT)" = "Provide fishery kits",
"Provide crops & vegetables kits (in-kind / CBT)" = "Provide crops & vegetables kits",
"Provide livestock kits (in-kind / CBT)" = "Provide livestock kits")) %>%
mutate(implementing_partners = recode(implementing_partners,
"Save the children" = "Save the Children")) %>%
mutate(implementing_partner_type =
ifelse(implementing_partners %in% c("Kaw Lah Foundation", "Hakha Baptist Association (HBA)", "Arkan Research and Watch",
"Hlaing Development Network", "Mangrove Service Network (MSN)", "Kyal Sin May",
"Swan Saung Shin", "Sein Lei Ayeyar"), "NNGO", implementing_partner_type),
implementing_partner_type =
ifelse(implementing_partners %in% c("Single Touch Point Company Limited (STP)", "Neo Prospect Company Limited"),
"other", implementing_partner_type),
implementing_partner_type = ifelse(implementing_partners == "Helen Keller International", "INGO", implementing_partner_type)) %>%
mutate(hrp_ierp = case_when(admin3_pcode %in% hrp2021_adm3_list ~ "hrp",
date > "2021-05-01" ~ "ierp",
TRUE ~ "non_hrp")) %>%
mutate(covid_19_response = recode(covid_19_response,
"No" = "no", "Yes" = "yes"),
covid_19_response = replace_na(covid_19_response, "no"))
# ben dataset -- tidy format 5Ws for beneficiaries
ben <- fsc %>%
filter(unique_beneficiaries == "Yes") %>%
select(date,
implementing_partners, implementing_partner_type,
state, township, village_ward_town, location, location_type, admin1_pcode, admin3_pcode,
activity, activity_status, hrp_indicator, beneficiary_type,
child_male, child_female, adult_male, adult_female, elderly_male, elderly_female) %>%
pivot_longer(cols = child_male:elderly_female,
names_to = "disaggregation", values_to = "beneficiaries", values_drop_na = TRUE)
# shapefiles
# pcode3_shape <- st_read("./mmr_polbnda_adm3_mimu_250k/mmr_polbnda_adm3_mimu_250k.shp", quiet = TRUE) %>%
#   rename(state = ST,
#          admin1_pcode = ST_PCODE,
#          township = TS,
#          admin3_pcode = TS_PCODE) %>%
#   mutate(admin3_pcode = ifelse(str_detect(township, "Hlaingtharya"), "MMR013008", admin3_pcode))
pcode3_shape <- st_read("./admin3 boundary old version/admin3 boundary old version.shp", quiet = TRUE)
# for relevelling -- this is in order of beneficiaries
sr_ord <- c("Yangon", "Rakhine", "Mandalay", "Ayeyarwady", "Magway", "Kachin", "Shan (North)", "Kayin",
"Mon", "Sagaing", "Kayah", "Chin", "Shan (South)", "Bago (East)", "Tanintharyi", "Shan (East)")
# for printing the targets of the pin
target_ben_2021 <- pin %>%
select(admin3_pcode, state, township, target_2021) %>%
filter(target_2021 > 0) %>%
left_join(ben %>%
group_by(admin3_pcode) %>%
summarise(beneficiaries = sum(beneficiaries)), by = "admin3_pcode") %>%
mutate(pc_reached = beneficiaries / target_2021 * 100) %>%
replace(is.na(.), 0)
st_read("./admin3 boundary old version/admin3 boundary old version.shp", quiet = TRUE) %>% glimpse()
st_read("./admin3 boundary old version/admin3 boundary old version.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE,
township = TS,
admin3_pcode = TS_PCODE)
st_read("./admin3 boundary old version/admin3 boundary old version.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE,
township = TS,
admin3_pcode = TS_PCODE) %>%
filter(str_detect(township, "Hlaingtharya"))
pcode3_shape <- st_read("./admin3 boundary old version/admin3 boundary old version.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE,
township = TS,
admin3_pcode = TS_PCODE)
ben %>%
group_by(admin3_pcode) %>%
summarise(partners = n_distinct(implementing_partners)) %>%
right_join(pcode3_shape, by = "admin3_pcode") %>%
st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = partners), size = 0.1) +
scale_fill_gradient(trans = "reverse", breaks = c(1, 3, 5, 7, 9,11)) +
theme_void() +
theme(legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.key.size = unit(0.7, 'cm')) +
labs(title = "Map of number of partners by township",
subtitle = "townships in grey do not have any partners present") +
pin %>%
group_by(admin3_pcode) %>%
summarise(PIN = sum(pin_new)) %>%
mutate(PIN = round(PIN, digits = 0),
PIN = recode(PIN,
'0' = NA_real_)) %>%
right_join(pcode3_shape, by = "admin3_pcode") %>%
st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = PIN), size = 0.1) +
scale_fill_gradient(trans = "reverse", breaks = c(10000, 50000, 100000, 150000, 180000)) +
theme_void() +
theme(legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.key.size = unit(0.7, 'cm')) +
labs(title = "Map of 2022 PIN by township",
subtitle = "townships in grey do not have any PIN estimated for them")
pcode3_shape %>% count(state)
pcode3_shape %>% glimpse(
)
fsc %>% filter(state == "Shan (North)") %>% select(admin3_pcode, township) %>% distinct()
pin %>% %>% filter(state == "Shan (North)") %>% select(admin3_pcode, township) %>% distinct()
pin %>% filter(state == "Shan (North)") %>% select(admin3_pcode, township) %>% distinct()
pin %>% filter(state == "Shan (North)") %>% select(admin3_pcode, township) %>% distinct() %>%  arrange(admin3_pcode)
fsc %>% filter(state == "Shan (North)") %>% select(admin3_pcode, township) %>% distinct() %>%  arrange(admin3_pcode)
pcode3_shape %>% filter(state == "Shan (North)") %>% select(admin3_pcode, township) %>% distinct() %>%  arrange(admin3_pcode)
# shapefiles
pcode3_shape <- st_read("./mmr_polbnda_adm3_mimu_250k/mmr_polbnda_adm3_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE,
township = TS,
admin3_pcode = TS_PCODE) %>%
mutate(admin3_pcode = ifelse(str_detect(township, "Hlaingtharya"), "MMR013008", admin3_pcode))
sc %>% filter(activity == "Provide monthly cash-based transfers" & !is.na(usd_hhd_bin)) %>%
count(usd_hhd_bin, wt = households) %>%
mutate(pc_of_total = round(n / sum(n) * 100, digits = 2))
fsc %>% filter(activity == "Provide monthly cash-based transfers" & !is.na(usd_hhd_bin)) %>%
count(usd_hhd_bin, wt = households) %>%
mutate(pc_of_total = round(n / sum(n) * 100, digits = 2))
cbt_bins <- fsc %>% filter(activity == "Provide monthly cash-based transfers" & !is.na(usd_hhd_bin)) %>%
count(usd_hhd_bin, wt = households) %>%
mutate(pc_of_total = round(n / sum(n) * 100, digits = 2))
fsc %>%
filter(unique_beneficiaries == "Yes" & activity == "Provide monthly cash-based transfers") %>%
filter(!is.na(new_value_hhd)) %>%
mutate(pc_meb = new_value_hhd / 114.55) %>%
group_by(usd_hhd_bin) %>%
summarise(avg_pc_of_meb = round(mean(pc_meb) * 100, digits = 2),
avg_usd_month = round(mean(new_value_hhd, na.rm = TRUE), digits = 2),
households = round(sum(households))) %>%
mutate(pc_of_hhd = round(households / sum(households) * 100, digits = 2)) %>%
kable(caption = "Monthly cash-based transfer values by percentage of MEB received", format.args = list(big.mark = ",")) %>%
kable_classic_2("striped") %>%
column_spec(5, color = "white", background = spec_color(cbt_bins$pc_of_total[1:7], end = 0.8, direction = -1))
# reminder to check the text in the paragraph above when you rerun the report with data
pin %>%
filter(hrp_target_total > 0) %>%
select(state, admin3_pcode, hrp_target_idps_2021, hrp_target_returnees_2021, hrp_target_stateless_rakhine_2021,
hrp_target_other_vulnerable_2021, hrp_target_total) %>%
left_join(fsc %>%
filter(!is.na(beneficiary_type) & unique_beneficiaries == "Yes" & hrp_ierp != "non_hrp") %>%
group_by(admin3_pcode, beneficiary_type) %>%
summarise(beneficiaries = sum(beneficiaries), .groups = "drop") %>%
pivot_wider(names_from = beneficiary_type, values_from = beneficiaries) %>%
mutate(total_beneficiaries = rowSums(across(where(is.numeric)), na.rm = TRUE)), by = "admin3_pcode") %>%
clean_names() %>%
replace(is.na(.), 0) %>%
group_by(state) %>%
summarise_at(vars(hrp_target_idps_2021:total_beneficiaries), ~sum(.)) %>%
mutate(host_local_pc = host_local_community / hrp_target_other_vulnerable_2021 * 100,
idp_pc = internally_displaced / hrp_target_idps_2021 * 100,
returnees_pc = returnees / hrp_target_returnees_2021 * 100,
rakhine_stateless_pc = rakhine_stateless / hrp_target_stateless_rakhine_2021 * 100,
total_pc = total_beneficiaries / hrp_target_total * 100) %>%
select(state, host_local_pc, idp_pc, returnees_pc, rakhine_stateless_pc, total_pc) %>%
mutate_at(vars(host_local_pc, idp_pc, returnees_pc, rakhine_stateless_pc, total_pc), ~ replace(., is.nan(.), NA)) %>%
mutate_at(vars(host_local_pc, idp_pc, returnees_pc, rakhine_stateless_pc, total_pc), ~ replace(., is.infinite(.), NA)) %>%
mutate_at(vars(host_local_pc, idp_pc, returnees_pc, rakhine_stateless_pc, total_pc), ~ round(., digits = 2)) %>%
rename(`host_local%` = host_local_pc,
`idp%` = idp_pc,
`returnees%` = returnees_pc,
`rakhine_stateless%` = rakhine_stateless_pc,
`total%` = total_pc) %>%
kable(caption = "Percentage of 2021 HRP target reached by beneficiary type") %>%
kable_classic_2("striped")
fsc %>% filter(unique_beneficiaries == "Yes") %>%
sum_ben2(hrp_ierp, covid_19_response) %>%
mutate(hrp_ierp = recode(hrp_ierp, "hrp" = "HRP", "ierp" = "IERP", "non_hrp" = "non_HRP")) %>%
pivot_wider(names_from = hrp_ierp, values_from = beneficiaries)
fsc %>% filter(unique_beneficiaries == "Yes") %>%
sum_ben2(hrp_ierp, covid_19_response) %>%
mutate(hrp_ierp = recode(hrp_ierp, "hrp" = "HRP", "ierp" = "IERP", "non_hrp" = "non_HRP")) %>%
pivot_wider(names_from = hrp_ierp, values_from = beneficiaries) %>%
mutate(total_ben = IERP + HRP + non_HRP,
pc_of_total = round(total_ben / sum(total_ben) * 100, digits = 2))
fsc %>% filter(unique_beneficiaries == "Yes") %>%
sum_ben2(hrp_ierp, covid_19_response) %>%
mutate(hrp_ierp = recode(hrp_ierp, "hrp" = "HRP", "ierp" = "IERP", "non_hrp" = "non_HRP")) %>%
pivot_wider(names_from = hrp_ierp, values_from = beneficiaries) %>%
mutate(total_ben = IERP + HRP + non_HRP,
pc_of_total = round(total_ben / sum(total_ben) * 100, digits = 2)) %>%
kable(caption = "COVID-19 response by HRP version", format.args = list(big.mark = ",")) %>%
kable_classic_2() %>%
footnote("All beneficiaries have been included in `total_ben`")
fsc %>% filter(unique_beneficiaries == "Yes") %>%
sum_ben2(hrp_ierp, covid_19_response) %>%
mutate(hrp_ierp = recode(hrp_ierp, "hrp" = "HRP", "ierp" = "IERP", "non_hrp" = "non_HRP")) %>%
pivot_wider(names_from = hrp_ierp, values_from = beneficiaries) %>%
mutate(total_ben = IERP + HRP + non_HRP,
pc_of_total = round(total_ben / sum(total_ben) * 100, digits = 2)) %>%
kable(caption = "COVID-19 response by HRP version", format.args = list(big.mark = ",")) %>%
kable_classic_2() %>%
footnote("All beneficiaries have been included in `total_ben`",
general_title = "")
View(hrp_version_tab)
