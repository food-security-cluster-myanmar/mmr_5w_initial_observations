mutate(location_type = paste0("industrial_zone"))
)%>%
mutate(location_code = case_when(location_type == "camp" ~ camp_pcode,
location_type == "payam" ~ payam_code,
location_type == "industrial_zone" ~ NA_character_)) %>%
mutate(locations_fuzzy = str_replace_all(location, "[[:punct:]]", ""))
# reading in 5ws
fsc <- read_excel(
"FSC 5W 2021 - GEOADMINS_final 19_Jan to Dec 2021 IM Combined_Draft_28012022.xlsx",
sheet = "FSC 5W Activites",
skip = 5) %>%
janitor::clean_names() %>%
select(month_of_implementation:hrp_version) %>%
rename_all(~str_replace_all(., "^number_of_", "")) %>%
rename_all(~str_replace_all(., "^number_", "")) %>%
rename(admin4_pcode = admin3_pcode,
admin3_pcode = admin2_pcode,
beneficiaries = reached_beneficiaries,
households = reached_households,
beneficiary_type = beneficiaries_type) %>%
mutate(industrial_zones = replace(industrial_zones, industrial_zones == "No", NA),
frequency = replace(frequency, frequency == "N/A", NA)) %>%
mutate(location = case_when(camp != "NA" ~ camp,
industrial_zones != "NA" ~ industrial_zones,
village_ward_town != "NA" ~ village_ward_town)) %>%
mutate(location_type = case_when(camp != "NA" ~ "camp",
industrial_zones != "NA" ~ "industrial_zone",
village_ward_town != "NA" ~ "village_ward_town")) %>%
mutate(locations_fuzzy = str_replace_all(location, "[[:punct:]]", " ")) %>%
mutate(total_value_mmk = value_per_household * households) %>%
mutate(date = my(month_of_implementation)) %>%
mutate(u_ben = ifelse(unique_beneficiaries == "Yes", beneficiaries, 0)) %>%
mutate(state = as.character(fct_recode(state,
"Kachin" = "kachin"))) %>%
mutate(mmk_hhd_bin = case_when(value_per_household < 10000 ~ "below_10k",
value_per_household >= 10000 & value_per_household <= 20000 ~ "10k_20k",
value_per_household > 20000 & value_per_household <= 50000 ~ "20k_50k",
value_per_household > 50000 & value_per_household <= 70000 ~ "50k_70k",
value_per_household > 70000 & value_per_household < 100000 ~ "70k_100k",
value_per_household >= 100000 & value_per_household < 200000 ~ "100k_200k",
value_per_household >= 200000 & value_per_household <= 300000 ~ "200k_300k",
value_per_household > 300000 ~ "above_300k",
TRUE ~ NA_character_),
mmk_hhd_bin = fct_relevel(mmk_hhd_bin, c("less_than_10k", "10k_20k","20k_50k", "50k_70k", "70k_100k", "100k_200k",
"200k_300k","more_than_300k")),
frequency = recode(frequency, "monthly" = "Monthly")) %>%
mutate(usd_hhd_bin =
case_when(value_per_household_usd < 10 ~ "<$10",
value_per_household_usd >= 10 & value_per_household_usd < 20 ~ ">=$10_<$20",
value_per_household_usd >= 20 & value_per_household_usd < 40 ~ ">=$20_<$40",
value_per_household_usd >= 40 & value_per_household_usd < 60 ~ ">=$40_<$60",
value_per_household_usd >= 60 & value_per_household_usd < 100 ~ ">=$60_<$100",
value_per_household_usd >= 100 & value_per_household_usd < 200 ~ ">=$100_<$200",
value_per_household_usd >= 200 ~ ">=$200",
TRUE ~ NA_character_),
usd_hhd_bin = fct_relevel(usd_hhd_bin, c("<$10", ">=$10_<$20", ">=$20_<$40", ">=$40_<$60",
">=$60_<$100", ">=$100_<$200", ">=$200"))) %>%
mutate(hrp_indicator =
recode(hrp_indicator,
"Number of people who received food and/or cash assistance" =
"1.Number of people who received food and/or cash assistance",
"Number of people who received agriculture and other livelihood support, contributing to household food security" =
"2.Number of people who received agriculture and other livelihood support")) %>%
mutate(beneficiary_type = str_trim(beneficiary_type)) %>%
mutate(beneficiary_type = as.character(fct_recode(beneficiary_type,
"Rakhine stateless" = "Non-displaced stateless people in Rakhine"))) %>%
mutate(activity = recode(activity,
"Provide monthly food baskets through in-kind assistance to acutely food insecure population in rural areas" =
"Provide monthly food baskets",
"Provide technical training (agriculture, livestock breeding, livelihood)" = "Provide technical training",
"Provide support for Income Generating Activities" = "Provide support for income generation",
"Provide monthly cash-based transfers to acutely food insecure population in rural areas" =
"Provide monthly cash-based transfers",
"Cash for Work / Food for Assets activities" = "Cash for Work / Food for Assets",
"Provide fishery kits (in-kind / CBT)" = "Provide fishery kits",
"Provide crops & vegetables kits (in-kind / CBT)" = "Provide crops & vegetables kits",
"Provide livestock kits (in-kind / CBT)" = "Provide livestock kits")) %>%
mutate(implementing_partners = recode(implementing_partners,
"Save the children" = "Save the Children")) %>%
mutate(implementing_partner_type =
ifelse(implementing_partners %in% c("Kaw Lah Foundation", "Hakha Baptist Association (HBA)", "Arkan Research and Watch",
"Hlaing Development Network", "Mangrove Service Network (MSN)", "Kyal Sin May",
"Swan Saung Shin", "Sein Lei Ayeyar"), "NNGO", implementing_partner_type),
implementing_partner_type =
ifelse(implementing_partners %in% c("Single Touch Point Company Limited (STP)", "Neo Prospect Company Limited"),
"other", implementing_partner_type),
implementing_partner_type = ifelse(implementing_partners == "Helen Keller International", "INGO", implementing_partner_type))
# ben dataset -- tidy format 5Ws for beneficiaries
ben <- fsc %>%
filter(unique_beneficiaries == "Yes") %>%
select(date,
implementing_partners, implementing_partner_type,
state, township, village_ward_town, location, location_type, admin1_pcode, admin3_pcode,
activity, activity_status, hrp_indicator, beneficiary_type,
child_male, child_female, adult_male, adult_female, elderly_male, elderly_female) %>%
pivot_longer(cols = child_male:elderly_female,
names_to = "disaggregation", values_to = "beneficiaries", values_drop_na = TRUE)
# reading in pin and targets
pin <- read_excel("PIN calculation Food Security Cluster_Township Breakdown.xlsx",
sheet = "Food Sec PiN with IDPs",
skip = 2) %>%
clean_names() %>%
select(-c(x17, x18, x19)) %>%
slice(1:346) %>%
fill(region) %>%
rename(state = region,
idps = id_ps,
pop_minus_idps = population_minus_id_ps,
pin_2022 = vulnerable_food_insecure_people_id_ps) %>%
filter(township != "Total") %>%
mutate_at(vars(pop_minus_idps:moderately_severely), ~ as.numeric(.)) %>%
left_join(townships, by = c("township" = "township_name")) %>%
select(-state) %>%
relocate(admin3_pcode) %>% relocate(state = state_name) %>% relocate(admin1_pcode) %>%
mutate(pc_vul = pin_2022 / total_pop,
pin_2022 = round(pin_2022, digits = 0)) %>%
left_join(read_excel("FSC PIN and Target _combine HRP and IERP 2021.xlsx") %>%
clean_names() %>%
select(admin3_pcode = tsp_pcode, pin_2021 = pin, target_2021 = target), by = "admin3_pcode") %>%
left_join(read_excel("fs_targets_2021.xlsx") %>%
clean_names() %>%
select(township = x1,
hrp_target_idps_2021 = internally_displaced_persons_12,
hrp_target_returnees_2021 = idp_returnees_resettled_locally_integrated_13,
hrp_target_stateless_rakhine_2021 = non_displaced_stateless_people_in_rakhine_14,
hrp_target_other_vulnerable_2021 = other_vulnerable_crisis_affected_people_15,
hrp_target_total = total_16) %>%
left_join(townships %>%  select(township_name, admin3_pcode), by = c("township" = "township_name")) %>%
select(-township),
by = "admin3_pcode") %>%
replace(is.na(.), 0)
# shapefiles
pcode3_shape <- st_read("./mmr_polbnda_adm3_mimu_250k/mmr_polbnda_adm3_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE,
township = TS,
admin3_pcode = TS_PCODE)
pcode1_shape <- st_read("./mmr_polbnda2_adm1_mimu_250k/mmr_polbnda2_adm1_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE)
# for relevelling -- this is in order of beneficiaries
sr_ord <- c("Yangon", "Rakhine", "Mandalay", "Ayeyarwady", "Magway", "Kachin", "Shan (North)", "Kayin",
"Mon", "Sagaing", "Kayah", "Chin", "Shan (South)", "Bago (East)", "Tanintharyi", "Shan (East)")
# for printing the targets of the pin
target_ben_2021 <- pin %>%
select(admin3_pcode, state, township, target_2021) %>%
filter(target_2021 > 0) %>%
left_join(ben %>%
group_by(admin3_pcode) %>%
summarise(beneficiaries = sum(beneficiaries)), by = "admin3_pcode") %>%
mutate(pc_reached = beneficiaries / target_2021 * 100) %>%
replace(is.na(.), 0)
# I think you need to coalesce the states and townships with pcode3_shape or start with pcode3_shape
tsp_map_ben <- pcode3_shape %>%
left_join(fsc %>%
filter(unique_beneficiaries == "Yes") %>%
group_by(admin3_pcode) %>%
summarise(beneficiaries = sum(beneficiaries),
partners = n_distinct(implementing_partners),
activities = n_distinct(activity)), by = "admin3_pcode") %>%
left_join(pin %>%
select(admin3_pcode, pin_2022), by = "admin3_pcode") %>%
st_as_sf() %>%
ggplot() +
geom_sf(size = 0.1,
aes(fill = beneficiaries,
text = paste0(township, ",", "\n",
state, "\n",
"beneficiaries: ", beneficiaries, "\n",
"org count: ", partners, "\n",
"act count: ", activities, "\n",
"PIN 2022: ", pin_2022))) +
scale_fill_viridis_c(option = "mako", direction = -1) +
labs(fill = "beneficiaries",
title = "Map of townships by beneficiaries reached in 2021") +
theme_void() +
theme(legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
plot.title = element_text(size = 12))
ggplotly(tsp_map_ben, tooltip = c("text")) %>%
layout(showlegend = TRUE, legend = list(font = list(size = 6))) %>%
plotly::style(hoveron = "fill") %>%
layout(title = list(text = paste0("Map of townships by beneficiaries reached in 2021",
"<br>",
"<sup>",
"mouse over for details; click and drag to select and zoom","</sup>")))
# I think you need to coalesce the states and townships with pcode3_shape or start with pcode3_shape
tsp_map_ben <- pcode3_shape %>%
left_join(fsc %>%
filter(unique_beneficiaries == "Yes") %>%
group_by(admin3_pcode) %>%
summarise(beneficiaries = sum(beneficiaries),
partners = n_distinct(implementing_partners),
activities = n_distinct(activity)), by = "admin3_pcode") %>%
left_join(pin %>%
select(admin3_pcode, pin_2022), by = "admin3_pcode") %>%
st_as_sf() %>%
ggplot() +
geom_sf(size = 0.1,
aes(fill = beneficiaries,
text = paste0(township, ",", "\n",
state, "\n",
"beneficiaries: ", beneficiaries, "\n",
"org count: ", partners, "\n",
"act count: ", activities, "\n",
"PIN 2022: ", pin_2022))) +
scale_fill_viridis_c(option = "mako", trans = "log10", direction = -1) +
labs(fill = "beneficiaries",
title = "Map of townships by beneficiaries reached in 2021") +
theme_void() +
theme(legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
plot.title = element_text(size = 12))
ggplotly(tsp_map_ben, tooltip = c("text")) %>%
layout(showlegend = TRUE, legend = list(font = list(size = 6))) %>%
plotly::style(hoveron = "fill") %>%
layout(title = list(text = paste0("Map of townships by beneficiaries reached in 2021",
"<br>",
"<sup>",
"mouse over for details; click and drag to select and zoom","</sup>")))
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(fuzzyjoin)
library(scales)
library(magrittr)
library(sf)
library(bookdown)
library(data.table)
library(ggsflabel)
library(patchwork)
library(plotly)
library(kableExtra)
library(DT)
library(viridis)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(beneficiaries)) %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(beneficiaries)) %>%
arrange(desc(beneficiaries))
}
# reading in townships from geoadmins
townships <- read_excel("FSC 5W 2021 - GEOADMINS_final 19.xlsx",
sheet = "GEOADMINS") %>%
clean_names() %>%
select(admin1pcode_4:admin3pcode) %>%
rename(admin1_pcode = admin1pcode_4,
admin3_pcode = admin3pcode,
state_name   = state_5,
township_name  = county) %>%
remove_empty()
# locations dataset
locations <- bind_rows(
read_excel("FSC 5W 2021 - GEOADMINS_final 19.xlsx", # payams
sheet = "GEOADMINS") %>%
clean_names() %>%
select(state_name:payam_code) %>%
rename(admin1_pcode = state_code_12,
township_name = county_name,
admin3_pcode = county_code,
location = payam_name) %>%
remove_empty() %>%
mutate(location_type = paste0("payam")),
read_excel("FSC 5W 2021 - GEOADMINS_final 19.xlsx", # camps
sheet = "GEOADMINS") %>%
clean_names() %>%
select(county_name1:p_code_camp) %>%
rename(township_name = county_name1,
admin3_pcode = state_code_23,
location = camps,
camp_pcode = p_code_camp) %>%
remove_empty() %>%
mutate(location_type = paste0("camp")) %>%
left_join(townships %>% select(state_name, admin1_pcode, admin3_pcode),
by = c("admin3_pcode")) %>%
relocate(admin1_pcode) %>%
relocate(state_name),
read_excel("FSC 5W 2021 - GEOADMINS_final 19.xlsx", # industrial zones
sheet = "GEOADMINS") %>%
clean_names() %>%
select(state_28:industrial_zones) %>%
rename(state_name = state_28,
admin1_pcode = admin1pcode_29,
location = industrial_zones) %>%
remove_empty() %>%
regex_left_join(townships %>% select(township_name, admin3_pcode),
by = c("location" = "township_name")) %>%
# replacing the NAs with 0s so the filter doesn't drop them
replace_na(list(township_name = 0, admin3_pcode = 0, admin1_pcode = 0)) %>%
filter(admin3_pcode != "MMR013040") %>% # removing all the matches between Hlaingtharya and Hlaing
filter(admin3_pcode != "MMR011006") %>% # removing all the matches between Yenangyaung and Ye
mutate(location_type = paste0("industrial_zone"))
)%>%
mutate(location_code = case_when(location_type == "camp" ~ camp_pcode,
location_type == "payam" ~ payam_code,
location_type == "industrial_zone" ~ NA_character_)) %>%
mutate(locations_fuzzy = str_replace_all(location, "[[:punct:]]", ""))
# reading in 5ws
fsc <- read_excel(
"FSC 5W 2021 - GEOADMINS_final 19_Jan to Dec 2021 IM Combined_Draft_28012022.xlsx",
sheet = "FSC 5W Activites",
skip = 5) %>%
janitor::clean_names() %>%
select(month_of_implementation:hrp_version) %>%
rename_all(~str_replace_all(., "^number_of_", "")) %>%
rename_all(~str_replace_all(., "^number_", "")) %>%
rename(admin4_pcode = admin3_pcode,
admin3_pcode = admin2_pcode,
beneficiaries = reached_beneficiaries,
households = reached_households,
beneficiary_type = beneficiaries_type) %>%
mutate(industrial_zones = replace(industrial_zones, industrial_zones == "No", NA),
frequency = replace(frequency, frequency == "N/A", NA)) %>%
mutate(location = case_when(camp != "NA" ~ camp,
industrial_zones != "NA" ~ industrial_zones,
village_ward_town != "NA" ~ village_ward_town)) %>%
mutate(location_type = case_when(camp != "NA" ~ "camp",
industrial_zones != "NA" ~ "industrial_zone",
village_ward_town != "NA" ~ "village_ward_town")) %>%
mutate(locations_fuzzy = str_replace_all(location, "[[:punct:]]", " ")) %>%
mutate(total_value_mmk = value_per_household * households) %>%
mutate(date = my(month_of_implementation)) %>%
mutate(u_ben = ifelse(unique_beneficiaries == "Yes", beneficiaries, 0)) %>%
mutate(state = as.character(fct_recode(state,
"Kachin" = "kachin"))) %>%
mutate(mmk_hhd_bin = case_when(value_per_household < 10000 ~ "below_10k",
value_per_household >= 10000 & value_per_household <= 20000 ~ "10k_20k",
value_per_household > 20000 & value_per_household <= 50000 ~ "20k_50k",
value_per_household > 50000 & value_per_household <= 70000 ~ "50k_70k",
value_per_household > 70000 & value_per_household < 100000 ~ "70k_100k",
value_per_household >= 100000 & value_per_household < 200000 ~ "100k_200k",
value_per_household >= 200000 & value_per_household <= 300000 ~ "200k_300k",
value_per_household > 300000 ~ "above_300k",
TRUE ~ NA_character_),
mmk_hhd_bin = fct_relevel(mmk_hhd_bin, c("less_than_10k", "10k_20k","20k_50k", "50k_70k", "70k_100k", "100k_200k",
"200k_300k","more_than_300k")),
frequency = recode(frequency, "monthly" = "Monthly")) %>%
mutate(usd_hhd_bin =
case_when(value_per_household_usd < 10 ~ "<$10",
value_per_household_usd >= 10 & value_per_household_usd < 20 ~ ">=$10_<$20",
value_per_household_usd >= 20 & value_per_household_usd < 40 ~ ">=$20_<$40",
value_per_household_usd >= 40 & value_per_household_usd < 60 ~ ">=$40_<$60",
value_per_household_usd >= 60 & value_per_household_usd < 100 ~ ">=$60_<$100",
value_per_household_usd >= 100 & value_per_household_usd < 200 ~ ">=$100_<$200",
value_per_household_usd >= 200 ~ ">=$200",
TRUE ~ NA_character_),
usd_hhd_bin = fct_relevel(usd_hhd_bin, c("<$10", ">=$10_<$20", ">=$20_<$40", ">=$40_<$60",
">=$60_<$100", ">=$100_<$200", ">=$200"))) %>%
mutate(hrp_indicator =
recode(hrp_indicator,
"Number of people who received food and/or cash assistance" =
"1.Number of people who received food and/or cash assistance",
"Number of people who received agriculture and other livelihood support, contributing to household food security" =
"2.Number of people who received agriculture and other livelihood support")) %>%
mutate(beneficiary_type = str_trim(beneficiary_type)) %>%
mutate(beneficiary_type = as.character(fct_recode(beneficiary_type,
"Rakhine stateless" = "Non-displaced stateless people in Rakhine"))) %>%
mutate(activity = recode(activity,
"Provide monthly food baskets through in-kind assistance to acutely food insecure population in rural areas" =
"Provide monthly food baskets",
"Provide technical training (agriculture, livestock breeding, livelihood)" = "Provide technical training",
"Provide support for Income Generating Activities" = "Provide support for income generation",
"Provide monthly cash-based transfers to acutely food insecure population in rural areas" =
"Provide monthly cash-based transfers",
"Cash for Work / Food for Assets activities" = "Cash for Work / Food for Assets",
"Provide fishery kits (in-kind / CBT)" = "Provide fishery kits",
"Provide crops & vegetables kits (in-kind / CBT)" = "Provide crops & vegetables kits",
"Provide livestock kits (in-kind / CBT)" = "Provide livestock kits")) %>%
mutate(implementing_partners = recode(implementing_partners,
"Save the children" = "Save the Children")) %>%
mutate(implementing_partner_type =
ifelse(implementing_partners %in% c("Kaw Lah Foundation", "Hakha Baptist Association (HBA)", "Arkan Research and Watch",
"Hlaing Development Network", "Mangrove Service Network (MSN)", "Kyal Sin May",
"Swan Saung Shin", "Sein Lei Ayeyar"), "NNGO", implementing_partner_type),
implementing_partner_type =
ifelse(implementing_partners %in% c("Single Touch Point Company Limited (STP)", "Neo Prospect Company Limited"),
"other", implementing_partner_type),
implementing_partner_type = ifelse(implementing_partners == "Helen Keller International", "INGO", implementing_partner_type))
# ben dataset -- tidy format 5Ws for beneficiaries
ben <- fsc %>%
filter(unique_beneficiaries == "Yes") %>%
select(date,
implementing_partners, implementing_partner_type,
state, township, village_ward_town, location, location_type, admin1_pcode, admin3_pcode,
activity, activity_status, hrp_indicator, beneficiary_type,
child_male, child_female, adult_male, adult_female, elderly_male, elderly_female) %>%
pivot_longer(cols = child_male:elderly_female,
names_to = "disaggregation", values_to = "beneficiaries", values_drop_na = TRUE)
# reading in pin and targets
pin <- read_excel("PIN calculation Food Security Cluster_Township Breakdown.xlsx",
sheet = "Food Sec PiN with IDPs",
skip = 2) %>%
clean_names() %>%
select(-c(x17, x18, x19)) %>%
slice(1:346) %>%
fill(region) %>%
rename(state = region,
idps = id_ps,
pop_minus_idps = population_minus_id_ps,
pin_2022 = vulnerable_food_insecure_people_id_ps) %>%
filter(township != "Total") %>%
mutate_at(vars(pop_minus_idps:moderately_severely), ~ as.numeric(.)) %>%
left_join(townships, by = c("township" = "township_name")) %>%
select(-state) %>%
relocate(admin3_pcode) %>% relocate(state = state_name) %>% relocate(admin1_pcode) %>%
mutate(pc_vul = pin_2022 / total_pop,
pin_2022 = round(pin_2022, digits = 0)) %>%
left_join(read_excel("FSC PIN and Target _combine HRP and IERP 2021.xlsx") %>%
clean_names() %>%
select(admin3_pcode = tsp_pcode, pin_2021 = pin, target_2021 = target), by = "admin3_pcode") %>%
left_join(read_excel("fs_targets_2021.xlsx") %>%
clean_names() %>%
select(township = x1,
hrp_target_idps_2021 = internally_displaced_persons_12,
hrp_target_returnees_2021 = idp_returnees_resettled_locally_integrated_13,
hrp_target_stateless_rakhine_2021 = non_displaced_stateless_people_in_rakhine_14,
hrp_target_other_vulnerable_2021 = other_vulnerable_crisis_affected_people_15,
hrp_target_total = total_16) %>%
left_join(townships %>%  select(township_name, admin3_pcode), by = c("township" = "township_name")) %>%
select(-township),
by = "admin3_pcode") %>%
replace(is.na(.), 0)
# shapefiles
pcode3_shape <- st_read("./mmr_polbnda_adm3_mimu_250k/mmr_polbnda_adm3_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE,
township = TS,
admin3_pcode = TS_PCODE)
pcode1_shape <- st_read("./mmr_polbnda2_adm1_mimu_250k/mmr_polbnda2_adm1_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE)
# for relevelling -- this is in order of beneficiaries
sr_ord <- c("Yangon", "Rakhine", "Mandalay", "Ayeyarwady", "Magway", "Kachin", "Shan (North)", "Kayin",
"Mon", "Sagaing", "Kayah", "Chin", "Shan (South)", "Bago (East)", "Tanintharyi", "Shan (East)")
# for printing the targets of the pin
target_ben_2021 <- pin %>%
select(admin3_pcode, state, township, target_2021) %>%
filter(target_2021 > 0) %>%
left_join(ben %>%
group_by(admin3_pcode) %>%
summarise(beneficiaries = sum(beneficiaries)), by = "admin3_pcode") %>%
mutate(pc_reached = beneficiaries / target_2021 * 100) %>%
replace(is.na(.), 0)
# I feel like this is the most inefficient way to do this; still works, though
# you're going to need to rewrite this when you have Q4 data
gap_months <- fsc %>%
filter(frequency == "Monthly" & beneficiaries > 0) %>%
group_by(date, implementing_partners, activity, state, township, location) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
pivot_wider(names_from = date, values_from = beneficiaries) %>%
unnest() %>%
ungroup() %>%
mutate(recurrences = rowSums(!is.na(select(., -implementing_partners, -activity, -state, -township, -location))),
ben_max = pmax(`2021-01-01`, `2021-02-01`, `2021-03-01`, `2021-04-01`, `2021-05-01`, `2021-06-01`,
`2021-07-01`, `2021-08-01`, `2021-09-01`, `2021-10-01`, `2021-11-01`, `2021-12-01`, na.rm = TRUE)) %>%
pivot_longer(cols = c(`2021-01-01`, `2021-02-01`, `2021-03-01`, `2021-04-01`, `2021-05-01`, `2021-06-01`,
`2021-07-01`, `2021-08-01`, `2021-09-01`, `2021-10-01`, `2021-11-01`, `2021-12-01`),
names_to = "date", values_to = "beneficiaries") %>%
mutate(distribution = ifelse(is.na(beneficiaries), "n", "y")) %>%
select(-beneficiaries) %>%
pivot_wider(names_from = date, values_from = distribution) %>%
mutate(gaps = paste0(`2021-01-01`, `2021-02-01`, `2021-03-01`, `2021-04-01`, `2021-05-01`, `2021-06-01`,
`2021-07-01`, `2021-08-01`, `2021-09-01`, `2021-10-01`, `2021-11-01`, `2021-12-01`)) %>%
mutate(gap_months = case_when(str_detect(gaps, "ynnnnnnnnnnny") ~ 11,
str_detect(gaps, "ynnnnnnnnnny") ~ 10,
str_detect(gaps, "ynnnnnnnnny") ~ 9,
str_detect(gaps, "ynnnnnnnny") ~ 8,
str_detect(gaps, "ynnnnnnny") ~ 7,
str_detect(gaps, "ynnnnnny") ~ 6,
str_detect(gaps, "ynnnnny") ~ 5,
str_detect(gaps, "ynnnny") ~ 4,
str_detect(gaps, "ynnny") ~ 3,
str_detect(gaps, "ynny") ~ 2,
str_detect(gaps, "yny") ~ 1,
TRUE ~ 0))
gap_months %>% filter(recurrences == 1) %>% nrow()
filter(gap_months, recurrences == 1) %>% nrow()
