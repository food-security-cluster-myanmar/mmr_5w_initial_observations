"Mon", "Sagaing", "Kayah", "Chin", "Shan (South)", "Bago (East)", "Tanintharyi", "Shan (East)")
# for printing the targets of the pin
target_ben_2021 <- pin %>%
select(admin3_pcode, state, township, target_2021) %>%
filter(target_2021 > 0) %>%
left_join(ben %>%
group_by(admin3_pcode) %>%
summarise(beneficiaries = sum(beneficiaries)), by = "admin3_pcode") %>%
mutate(pc_reached = beneficiaries / target_2021 * 100) %>%
replace(is.na(.), 0)
ben %>%
group_by(admin3_pcode) %>%
summarise(partners = n_distinct(implementing_partners)) %>%
right_join(pcode3_shape, by = "admin3_pcode") %>%
st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = partners), size = 0.1) +
scale_fill_gradient(trans = "reverse", breaks = c(1, 3, 5, 7, 9,11)) +
theme_void() +
theme(legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.key.size = unit(0.7, 'cm')) +
labs(title = "Map of number of partners by township",
subtitle = "townships in grey do not have any partners present") +
pin %>%
group_by(admin3_pcode) %>%
summarise(PIN = sum(pin_new)) %>%
mutate(PIN = round(PIN, digits = 0),
PIN = recode(PIN,
'0' = NA_real_)) %>%
right_join(pcode3_shape, by = "admin3_pcode") %>%
st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = PIN), size = 0.1) +
scale_fill_gradient(trans = "reverse", breaks = c(10000, 50000, 100000, 150000, 200000)) +
theme_void() +
theme(legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.key.size = unit(0.7, 'cm')) +
labs(title = "Map of 2022 PIN by township",
subtitle = "townships in grey do not have any PIN estimated for them")
revlog_trans <- function(base = exp(1)){
## Define the desired transformation.
trans <- function(x){
-log(x, base)
}
## Define the reverse of the desired transformation
inv <- function(x){
base^(-x)
}
## Creates the transformation
trans_new(paste("revlog-", base, sep = ""),
trans, ## The transformation function (can be defined using anonymous functions)
inv,  ## The reverse of the transformation
log_breaks(base = base), ## default way to define the scale breaks
domain = c(1e-100, Inf) ## The domain over which the transformation is valued
)
}
ben %>%
group_by(admin3_pcode) %>%
summarise(partners = n_distinct(implementing_partners)) %>%
right_join(pcode3_shape, by = "admin3_pcode") %>%
st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = partners), size = 0.1) +
scale_fill_gradient(trans = "reverse", breaks = c(1, 3, 5, 7, 9,11)) +
theme_void() +
theme(legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.key.size = unit(0.7, 'cm')) +
labs(title = "Map of number of partners by township",
subtitle = "townships in grey do not have any partners present") +
pin %>%
group_by(admin3_pcode) %>%
summarise(PIN = sum(target_2022)) %>%
mutate(PIN = round(PIN, digits = 0),
PIN = recode(PIN,
'0' = NA_real_)) %>%
right_join(pcode3_shape, by = "admin3_pcode") %>%
st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = PIN), size = 0.1) +
scale_fill_gradient(trans = revlog_trans(10), breaks = c(10000, 50000, 100000, 150000, 200000)) +
theme_void() +
theme(legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.key.size = unit(0.7, 'cm')) +
labs(title = "Map of 2022 PIN by township",
subtitle = "townships in grey do not have any PIN estimated for them")
ben %>%
group_by(admin3_pcode) %>%
summarise(partners = n_distinct(implementing_partners)) %>%
right_join(pcode3_shape, by = "admin3_pcode") %>%
st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = partners), size = 0.1) +
scale_fill_gradient(trans = "reverse", breaks = c(1, 3, 5, 7, 9,11)) +
theme_void() +
theme(legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.key.size = unit(0.7, 'cm')) +
labs(title = "Map of number of partners by township",
subtitle = "townships in grey do not have any partners present") +
pin %>%
group_by(admin3_pcode) %>%
summarise(PIN = sum(target_2022)) %>%
mutate(PIN = round(PIN, digits = 0),
PIN = recode(PIN,
'0' = NA_real_)) %>%
right_join(pcode3_shape, by = "admin3_pcode") %>%
st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = PIN), size = 0.1) +
scale_fill_gradient(trans = revlog_trans(10), breaks = c(100, 1000, 10000, 100000, 200000)) +
theme_void() +
theme(legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.key.size = unit(0.7, 'cm')) +
labs(title = "Map of 2022 PIN by township",
subtitle = "townships in grey do not have any PIN estimated for them")
ben %>%
group_by(admin3_pcode) %>%
summarise(partners = n_distinct(implementing_partners)) %>%
right_join(pcode3_shape, by = "admin3_pcode") %>%
st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = partners), size = 0.1) +
scale_fill_gradient(trans = "reverse", breaks = c(1, 3, 5, 7, 9,11)) +
theme_void() +
theme(legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.key.size = unit(0.7, 'cm')) +
labs(title = "Map of number of partners by township",
subtitle = "townships in grey do not have any partners present") +
pin %>%
group_by(admin3_pcode) %>%
summarise(PIN = sum(target_2022)) %>%
mutate(PIN = round(PIN, digits = 0),
PIN = recode(PIN,
'0' = NA_real_)) %>%
right_join(pcode3_shape, by = "admin3_pcode") %>%
st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = PIN), size = 0.1) +
scale_fill_gradient(trans = revlog_trans(10), breaks = c(100, 1000, 10000, 100000, 300000)) +
theme_void() +
theme(legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.key.size = unit(0.7, 'cm')) +
labs(title = "Map of 2022 PIN by township",
subtitle = "townships in grey do not have any PIN estimated for them")
# I think you need to coalesce the states and townships with pcode3_shape or start with pcode3_shape
tsp_map <- pcode3_shape %>%
left_join(ben %>%
group_by(admin3_pcode) %>%
summarise(beneficiaries = sum(beneficiaries),
partners = n_distinct(implementing_partners),
activities = n_distinct(activity)), by = "admin3_pcode") %>%
left_join(pin %>%
select(admin3_pcode, idps, target_2022, pin_new), by = "admin3_pcode") %>%
replace(is.na(.), 0) %>%
mutate(target_2022 = round(target_2022)) %>%
st_as_sf() %>%
ggplot() +
geom_sf(size = 0.1,
aes(fill = pin_new,
text = paste0(township, ",", "\n",
state, "\n",
"PIN 2022: ", pin_new, "\n",
"target 2022: ", target_2022, "\n",
"IDPs: ", idps, "\n",
"org count: ", partners, "\n",
"beneficiaries: ", beneficiaries))) +
scale_fill_viridis_c(option = "mako", direction = -1) +
labs(fill = "target 2022",
title = "Map of townships by 2022 target") +
theme_void() +
theme(legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
plot.title = element_text(size = 12))
ggplotly(tsp_map, tooltip = c("text")) %>%
layout(showlegend = TRUE, legend = list(font = list(size = 6))) %>%
plotly::style(hoveron = "fill") %>%
layout(title = list(text = paste0("Map of townships by 2022 target",
"<br>",
"<sup>",
"mouse over for details; click and drag to select and zoom","</sup>")))
# I think you need to coalesce the states and townships with pcode3_shape or start with pcode3_shape
tsp_map <- pcode3_shape %>%
left_join(ben %>%
group_by(admin3_pcode) %>%
summarise(beneficiaries = sum(beneficiaries),
partners = n_distinct(implementing_partners),
activities = n_distinct(activity)), by = "admin3_pcode") %>%
left_join(pin %>%
select(admin3_pcode, idps, target_2022, pin_new), by = "admin3_pcode") %>%
replace(is.na(.), 0) %>%
mutate(target_2022 = round(target_2022)) %>%
st_as_sf() %>%
ggplot() +
geom_sf(size = 0.1,
aes(fill = target_2022,
text = paste0(township, ",", "\n",
state, "\n",
"PIN 2022: ", pin_new, "\n",
"target 2022: ", target_2022, "\n",
"IDPs: ", idps, "\n",
"org count: ", partners, "\n",
"beneficiaries: ", beneficiaries))) +
scale_fill_viridis_c(option = "mako", direction = -1) +
labs(fill = "target 2022",
title = "Map of townships by 2022 target") +
theme_void() +
theme(legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
plot.title = element_text(size = 12))
ggplotly(tsp_map, tooltip = c("text")) %>%
layout(showlegend = TRUE, legend = list(font = list(size = 6))) %>%
plotly::style(hoveron = "fill") %>%
layout(title = list(text = paste0("Map of townships by 2022 target",
"<br>",
"<sup>",
"mouse over for details; click and drag to select and zoom","</sup>")))
# I think you need to coalesce the states and townships with pcode3_shape or start with pcode3_shape
tsp_map <- pcode3_shape %>%
left_join(ben %>%
group_by(admin3_pcode) %>%
summarise(beneficiaries = sum(beneficiaries),
partners = n_distinct(implementing_partners),
activities = n_distinct(activity)), by = "admin3_pcode") %>%
left_join(pin %>%
select(admin3_pcode, idps, target_2022, pin_new), by = "admin3_pcode") %>%
replace(is.na(.), 0) %>%
mutate(target_2022 = round(target_2022)) %>%
st_as_sf() %>%
ggplot() +
geom_sf(size = 0.1,
aes(fill = target_2022,
text = paste0(township, ",", "\n",
state, "\n",
"PIN 2022: ", pin_new, "\n",
"target 2022: ", target_2022, "\n",
"IDPs: ", idps, "\n",
"org count: ", partners, "\n",
"beneficiaries: ", beneficiaries))) +
scale_fill_viridis_c(option = "mako", direction = -1, trans = "log10") +
labs(fill = "target 2022",
title = "Map of townships by 2022 target") +
theme_void() +
theme(legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
plot.title = element_text(size = 12))
ggplotly(tsp_map, tooltip = c("text")) %>%
layout(showlegend = TRUE, legend = list(font = list(size = 6))) %>%
plotly::style(hoveron = "fill") %>%
layout(title = list(text = paste0("Map of townships by 2022 target",
"<br>",
"<sup>",
"mouse over for details; click and drag to select and zoom","</sup>")))
# add in target
pin %>%
select(state, township, admin3_pcode, total_pop, PIN_2022 = pin_2022, target_2022, IDPs = idps) %>%
mutate(total_pop = round(total_pop, digits = 0)) %>%
left_join(fsc %>%
select(activity, partners = implementing_partners, beneficiaries = u_ben, beneficiary_frequencies = beneficiaries,
location, admin3_pcode) %>%
group_by(admin3_pcode) %>%
summarise(partners = n_distinct(partners),
beneficiaries = sum(beneficiaries, na.rm = TRUE),
beneficiary_frequencies = sum(beneficiary_frequencies, na.rm = TRUE),
locations = n_distinct(location)), by = "admin3_pcode") %>%
replace_na(list(partners = 0, beneficiaries = 0, beneficiary_frequencies = 0, locations = 0)) %>%
relocate(admin3_pcode, .after = locations) %>%
arrange(desc(beneficiaries)) %>%
datatable(filter = list(position = "top", clear = FALSE),
options = list(pageLength = 10, scrollX = TRUE
#
#                         ,
#                                         initComplete = htmlwidgets::JS(
#        "function(settings, json) {",
#        paste0("$(this.api().table().container()).css({'font-size': '", "8.5pt", "'});"),
#        "}")
)
) %>%
formatRound(c("total_pop", "beneficiaries", "IDPs", "PIN_2022", "beneficiary_frequencies"), digits = 0)
# add in target
pin %>%
select(state, township, admin3_pcode, total_pop, PIN_2022 = pin_2022, target_2022, IDPs = idps) %>%
mutate(total_pop = round(total_pop, digits = 0)) %>%
left_join(fsc %>%
select(activity, partners = implementing_partners, beneficiaries = u_ben, beneficiary_frequencies = beneficiaries,
location, admin3_pcode) %>%
group_by(admin3_pcode) %>%
summarise(partners = n_distinct(partners),
beneficiaries = sum(beneficiaries, na.rm = TRUE),
beneficiary_frequencies = sum(beneficiary_frequencies, na.rm = TRUE),
locations = n_distinct(location)), by = "admin3_pcode") %>%
replace_na(list(partners = 0, beneficiaries = 0, beneficiary_frequencies = 0, locations = 0)) %>%
relocate(admin3_pcode, .after = locations) %>%
arrange(admin3_pcode) %>%
datatable(filter = list(position = "top", clear = FALSE),
options = list(pageLength = 10, scrollX = TRUE
#
#                         ,
#                                         initComplete = htmlwidgets::JS(
#        "function(settings, json) {",
#        paste0("$(this.api().table().container()).css({'font-size': '", "8.5pt", "'});"),
#        "}")
)
) %>%
formatRound(c("total_pop", "beneficiaries", "IDPs", "PIN_2022", "target_2022", "beneficiary_frequencies"), digits = 0)
fsc %>% filter(state == "Chin") %>%
sum_ben2(implementing_partners, township)
activities = n_distinct(activity, .groups = "drop") %>%
ben %>%
ben %>%
filter(!is.na(location)) %>%
group_by(location, township) %>%
summarise(beneficiaries = sum(beneficiaries),
activities = n_distinct(activity, .groups = "drop")) %>%
arrange(desc(activities)) %>%
ggplot(aes(x = beneficiaries)) +
geom_histogram(binwidth = 0.1) +
scale_x_log10() +
facet_wrap(~ partners) +
labs(y = "number of locations",
x = "beneficiaries per location",
title = "Histograms of beneficiaries by location",
subtitle = "Faceted by number of partners per location")
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township) %>%
summarise(beneficiaries = sum(beneficiaries),
activities = n_distinct(activity, .groups = "drop")) %>%
arrange(desc(activities)) %>%
ggplot(aes(x = beneficiaries)) +
geom_histogram(binwidth = 0.1) +
scale_x_log10() +
facet_wrap(~ partners) +
labs(y = "number of locations",
x = "beneficiaries per location",
title = "Histograms of beneficiaries by location",
subtitle = "Faceted by number of partners per location")
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township) %>%
summarise(beneficiaries = sum(beneficiaries),
activities = n_distinct(activity, .groups = "drop")) %>%
arrange(desc(activities)) %>%
ggplot(aes(x = beneficiaries)) +
geom_histogram(binwidth = 0.1) +
scale_x_log10() +
facet_wrap(~ activities) +
labs(y = "number of locations",
x = "beneficiaries per location",
title = "Histograms of beneficiaries by location",
subtitle = "Faceted by number of partners per location")
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township) %>%
summarise(beneficiaries = sum(beneficiaries),
activities = n_distinct(activity, .groups = "drop")) %>%
filter(activities == 3)
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township) %>%
summarise(beneficiaries = sum(beneficiaries),
activities = n_distinct(activity, .groups = "drop")) %>%
filter(activities == 3) %>%  arrange(desc(beneficiaries))
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township, state) %>%
summarise(beneficiaries = sum(beneficiaries),
activities = n_distinct(activity, .groups = "drop")) %>%
filter(activities == 3) %>%  arrange(desc(beneficiaries))
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township, state) %>%
summarise(beneficiaries = sum(beneficiaries),
activities = n_distinct(activity, .groups = "drop")) %>%
filter(activities == 3) %>%  arrange(desc(beneficiaries)) %>%
group_by(state) %>%
summarise(beneficiaries = sum(beneficiaries),
townships = n_distinct(township),
locations = n_distinct(location))
ben %>%
filter(!is.na(location)) %>%
group_by(location, township) %>%
summarise(beneficiaries = sum(beneficiaries),
activities = n_distinct(activity, .groups = "drop")) %>%
arrange(desc(activities)) %>%
ggplot(aes(x = beneficiaries)) +
geom_histogram(binwidth = 0.1) +
scale_x_log10() +
facet_wrap(~ activities) +
labs(y = "number of locations",
x = "beneficiaries per location",
title = "Histograms of number of FSC activities by location",
subtitle = "Faceted by number of FSC activities per location")
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township) %>%
summarise(beneficiaries = sum(beneficiaries),
activities = n_distinct(activity, .groups = "drop")) %>%
arrange(desc(activities)) %>%
ggplot(aes(x = beneficiaries)) +
geom_histogram(binwidth = 0.1) +
scale_x_log10() +
facet_wrap(~ activities) +
labs(y = "number of locations",
x = "beneficiaries per location",
title = "Histograms of number of FSC activities by location",
subtitle = "Faceted by number of FSC activities per location")
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township) %>%
summarise(beneficiaries = sum(beneficiaries),
number_of_partners = n_distinct(implementing_partners), .groups = "drop") %>%
group_by(number_of_partners) %>%
summarise(locations = sum(n_distinct(location)),
avg_beneficiaries = median(beneficiaries), .groups = "drop")
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township) %>%
summarise(beneficiaries = sum(beneficiaries),
number_of_activities = n_distinct(activities), .groups = "drop") %>%
group_by(number_of_activities) %>%
summarise(locations = sum(n_distinct(location)),
avg_beneficiary_frequencies = median(beneficiaries), .groups = "drop")
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township) %>%
summarise(beneficiaries = sum(beneficiaries),
number_of_activities = n_distinct(activity), .groups = "drop") %>%
group_by(number_of_activities) %>%
summarise(locations = sum(n_distinct(location)),
avg_beneficiary_frequencies = median(beneficiaries), .groups = "drop")
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township) %>%
summarise(beneficiaries = sum(beneficiaries),
number_of_activities = n_distinct(activity), .groups = "drop") %>%
group_by(number_of_activities) %>%
summarise(locations = sum(n_distinct(location)),
avg_beneficiary_frequencies = median(beneficiaries), .groups = "drop") %>%
mutate(number_of_partners = recode(number_of_partners, `1` = "one",
`2` = "two",
`3` = "three",
`4` = "four",
`5` = "five")) %>%
kable(caption = "Average beneficiaries by locations with one, two, three, four and five activities", format.args = list(big.mark = ",")) %>%
kable_classic_2(full_width = FALSE, position = "left")
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township) %>%
summarise(beneficiaries = sum(beneficiaries),
number_of_activities = n_distinct(activity), .groups = "drop") %>%
group_by(number_of_activities) %>%
summarise(locations = sum(n_distinct(location)),
avg_beneficiary_frequencies = median(beneficiaries), .groups = "drop") %>%
mutate(number_of_activities = recode(number_of_activities, `1` = "one",
`2` = "two",
`3` = "three",
`4` = "four",
`5` = "five")) %>%
kable(caption = "Average beneficiary frequencies in locations with one, two, three, four and five activities", format.args = list(big.mark = ",")) %>%
kable_classic_2(full_width = FALSE, position = "left")
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township) %>%
summarise(beneficiaries = sum(beneficiaries),
number_of_activities = n_distinct(activity), .groups = "drop") %>%
group_by(number_of_activities) %>%
summarise(locations = sum(n_distinct(location)),
avg_beneficiary_frequencies = median(beneficiaries), .groups = "drop") %>%
mutate(number_of_activities = recode(number_of_activities, `1` = "one",
`2` = "two",
`3` = "three",
`4` = "four",
`5` = "five"),
avg_beneficiary_frequencies = round(avg_beneficiary_frequencies)) %>%
kable(caption = "Average beneficiary frequencies in locations with one, two, three, four and five activities",
format.args = list(big.mark = ",")) %>%
kable_classic_2(full_width = FALSE, position = "left")
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township) %>%
summarise(beneficiaries = sum(beneficiaries),
partners = n_distinct(implementing_partners), .groups = "drop") %>%
arrange(desc(partners)) %>%
ggplot(aes(x = beneficiaries)) +
geom_histogram(binwidth = 0.1) +
scale_x_log10() +
facet_wrap(~ partners) +
labs(y = "number of locations",
x = "beneficiaries per location",
title = "Histograms of beneficiaries by location",
subtitle = "Faceted by number of partners per location")
fsc %>%
filter(!is.na(location)) %>%
group_by(location, township) %>%
summarise(beneficiaries = sum(beneficiaries),
number_of_partners = n_distinct(implementing_partners), .groups = "drop") %>%
group_by(number_of_partners) %>%
summarise(locations = sum(n_distinct(location)),
avg_beneficiaries = median(beneficiaries), .groups = "drop") %>%
mutate(number_of_partners = recode(number_of_partners, `1` = "one",
`2` = "two",
`3` = "three",
`4` = "four")) %>%
kable(caption = "Average beneficiaries in locations with one, two, three and four partners", format.args = list(big.mark = ",")) %>%
kable_classic_2(full_width = FALSE, position = "left")
